"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevelopmentInformation = void 0;
const tslib_1 = require("tslib");
class DevelopmentInformation {
    constructor(client) {
        this.client = client;
    }
    storeDevelopmentInformation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/devinfo/0.10/bulk',
                method: 'POST',
                data: {
                    repositories: parameters.repositories,
                    preventTransitions: parameters.preventTransitions,
                    operationType: parameters.operationType,
                    properties: parameters.properties,
                    providerMetadata: parameters.providerMetadata,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRepository(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/devinfo/0.10/repository/${parameters.repositoryId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteRepository(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/devinfo/0.10/repository/${parameters.repositoryId}`,
                method: 'DELETE',
                params: {
                    _updateSequenceId: parameters.updateSequenceId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteByProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/devinfo/0.10/bulkByProperties',
                method: 'DELETE',
                params: {
                    _updateSequenceId: parameters.updateSequenceId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    existsByProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/devinfo/0.10/existsByProperties',
                method: 'GET',
                params: {
                    _updateSequenceId: parameters.updateSequenceId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteEntity(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/devinfo/0.10/repository/${parameters.repositoryId}/${parameters.entityType}/${parameters.entityId}`,
                method: 'DELETE',
                params: {
                    _updateSequenceId: parameters.updateSequenceId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.DevelopmentInformation = DevelopmentInformation;
//# sourceMappingURL=developmentInformation.js.map