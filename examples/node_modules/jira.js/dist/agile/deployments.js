"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployments = void 0;
const tslib_1 = require("tslib");
class Deployments {
    constructor(client) {
        this.client = client;
    }
    submitDeployments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/deployments/0.1/bulk',
                method: 'POST',
                data: {
                    properties: parameters.properties,
                    deployments: parameters.deployments,
                    providerMetadata: parameters.providerMetadata,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteDeploymentsByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/deployments/0.1/bulkByProperties',
                method: 'DELETE',
                params: {
                    _updateSequenceNumber: parameters.updateSequenceNumber,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getDeploymentByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/deployments/0.1/pipelines/${parameters.pipelineId}/environments/${parameters.environmentId}/deployments/${parameters.deploymentSequenceNumber}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteDeploymentByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/deployments/0.1/pipelines/${parameters.pipelineId}/environments/${parameters.environmentId}/deployments/${parameters.deploymentSequenceNumber}`,
                method: 'DELETE',
                params: {
                    _updateSequenceNumber: parameters.updateSequenceNumber,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getDeploymentGatingStatusByKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/deployments/0.1/pipelines/${parameters.pipelineId}/environments/${parameters.environmentId}/deployments/${parameters.deploymentSequenceNumber}/gating-status`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Deployments = Deployments;
//# sourceMappingURL=deployments.js.map