"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityInformation = void 0;
const tslib_1 = require("tslib");
class SecurityInformation {
    constructor(client) {
        this.client = client;
    }
    submitWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/security/1.0/linkedWorkspaces/bulk',
                method: 'POST',
                data: {
                    workspaceIds: parameters.workspaceIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteLinkedWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/security/1.0/linkedWorkspaces/bulk',
                method: 'DELETE',
                params: {
                    workspaceIds: parameters.workspaceIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getLinkedWorkspaces(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/security/1.0/linkedWorkspaces',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getLinkedWorkspaceById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/security/1.0/linkedWorkspaces/${parameters.workspaceId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    submitVulnerabilities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/security/1.0/bulk',
                method: 'POST',
                data: {
                    operationType: parameters.operationType,
                    properties: parameters.properties,
                    vulnerabilities: parameters.vulnerabilities,
                    providerMetadata: parameters.providerMetadata,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteVulnerabilitiesByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/security/1.0/bulkByProperties',
                method: 'DELETE',
                params: parameters,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getVulnerabilityById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/security/1.0/vulnerability/${parameters.vulnerabilityId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteVulnerabilityById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/security/1.0/vulnerability/${parameters.vulnerabilityId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.SecurityInformation = SecurityInformation;
//# sourceMappingURL=securityInformation.js.map