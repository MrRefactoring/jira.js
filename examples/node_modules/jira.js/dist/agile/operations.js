"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Operations = void 0;
const tslib_1 = require("tslib");
class Operations {
    constructor(client) {
        this.client = client;
    }
    submitOperationsWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/operations/1.0/linkedWorkspaces/bulk',
                method: 'POST',
                data: {
                    workspaceIds: parameters.workspaceIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/operations/1.0/linkedWorkspaces/bulk',
                method: 'DELETE',
                params: {
                    workspaceIds: parameters.workspaceIds.join(','),
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkspaces(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/operations/1.0/linkedWorkspaces',
                method: 'GET',
                params: {
                    workspaceId: parameters.workspaceId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    submitEntity(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/operations/1.0/bulk',
                method: 'POST',
                data: parameters,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteEntityByProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/operations/1.0/bulkByProperties',
                method: 'DELETE',
                params: parameters,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIncidentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/operations/1.0/incidents/${parameters.incidentId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteIncidentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/operations/1.0/incidents/${parameters.incidentId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getReviewById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/operations/1.0/post-incident-reviews/${parameters.reviewId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteReviewById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/operations/1.0/post-incident-reviews/${parameters.reviewId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Operations = Operations;
//# sourceMappingURL=operations.js.map