"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueCustomFieldOptionsApps = void 0;
const tslib_1 = require("tslib");
class IssueCustomFieldOptionsApps {
    constructor(client) {
        this.client = client;
    }
    getAllIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fieldKey = typeof parameters === 'string' ? parameters : parameters.fieldKey;
            const config = {
                url: `/rest/api/3/field/${fieldKey}/option`,
                method: 'GET',
                params: {
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/field/${parameters.fieldKey}/option`,
                method: 'POST',
                data: {
                    config: parameters.config,
                    properties: parameters.properties,
                    value: parameters.value,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSelectableIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fieldKey = typeof parameters === 'string' ? parameters : parameters.fieldKey;
            const config = {
                url: `/rest/api/3/field/${fieldKey}/option/suggestions/edit`,
                method: 'GET',
                params: {
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                    projectId: typeof parameters !== 'string' && parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getVisibleIssueFieldOptions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fieldKey = typeof parameters === 'string' ? parameters : parameters.fieldKey;
            const config = {
                url: `/rest/api/3/field/${fieldKey}/option/suggestions/search`,
                method: 'GET',
                params: {
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                    projectId: typeof parameters !== 'string' && parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/field/${parameters.fieldKey}/option/${parameters.optionId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/field/${parameters.fieldKey}/option/${parameters.optionId}`,
                method: 'PUT',
                data: {
                    config: parameters.config,
                    id: parameters.id,
                    properties: parameters.properties,
                    value: parameters.value,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/field/${parameters.fieldKey}/option/${parameters.optionId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    replaceIssueFieldOption(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/field/${parameters.fieldKey}/option/${parameters.optionId}/issue`,
                method: 'DELETE',
                params: {
                    replaceWith: parameters.replaceWith,
                    jql: parameters.jql,
                    overrideScreenSecurity: parameters.overrideScreenSecurity,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueCustomFieldOptionsApps = IssueCustomFieldOptionsApps;
//# sourceMappingURL=issueCustomFieldOptionsApps.js.map