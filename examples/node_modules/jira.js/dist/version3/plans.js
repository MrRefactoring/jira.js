"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plans = void 0;
const tslib_1 = require("tslib");
class Plans {
    constructor(client) {
        this.client = client;
    }
    getPlans(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/plans/plan',
                method: 'GET',
                params: {
                    includeTrashed: parameters === null || parameters === void 0 ? void 0 : parameters.includeTrashed,
                    includeArchived: parameters === null || parameters === void 0 ? void 0 : parameters.includeArchived,
                    cursor: parameters === null || parameters === void 0 ? void 0 : parameters.cursor,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createPlan(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/plans/plan',
                method: 'POST',
                params: {
                    useGroupId: parameters.useGroupId,
                },
                data: {
                    crossProjectReleases: parameters.crossProjectReleases,
                    customFields: parameters.customFields,
                    exclusionRules: parameters.exclusionRules,
                    issueSources: parameters.issueSources,
                    leadAccountId: parameters.leadAccountId,
                    name: parameters.name,
                    permissions: parameters.permissions,
                    scheduling: parameters.scheduling,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPlan(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/plans/plan/${parameters.planId}`,
                method: 'GET',
                params: {
                    useGroupId: parameters.useGroupId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updatePlan(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/plans/plan/${parameters.planId}`,
                method: 'PUT',
                params: {
                    useGroupId: parameters.useGroupId,
                },
                data: {
                    crossProjectReleases: parameters.crossProjectReleases,
                    customFields: parameters.customFields,
                    exclusionRules: parameters.exclusionRules,
                    issueSources: parameters.issueSources,
                    leadAccountId: parameters.leadAccountId,
                    name: parameters.name,
                    permissions: parameters.permissions,
                    scheduling: parameters.scheduling,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    archivePlan(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/plans/plan/${parameters.planId}/archive`,
                method: 'PUT',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    duplicatePlan(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/plans/plan/${parameters.planId}/duplicate`,
                method: 'POST',
                data: {
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    trashPlan(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/plans/plan/${parameters.planId}/trash`,
                method: 'PUT',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Plans = Plans;
//# sourceMappingURL=plans.js.map