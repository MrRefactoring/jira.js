"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueWorklogs = void 0;
const tslib_1 = require("tslib");
class IssueWorklogs {
    constructor(client) {
        this.client = client;
    }
    getIssueWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    startedAfter: parameters.startedAfter,
                    startedBefore: parameters.startedBefore,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let comment;
            if (typeof parameters.comment === 'string') {
                comment = {
                    type: 'doc',
                    version: 1,
                    content: [
                        {
                            type: 'paragraph',
                            content: [
                                {
                                    type: 'text',
                                    text: parameters.comment,
                                },
                            ],
                        },
                    ],
                };
            }
            else {
                comment = parameters.comment;
            }
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog`,
                method: 'POST',
                params: {
                    notifyUsers: parameters.notifyUsers,
                    adjustEstimate: parameters.adjustEstimate,
                    newEstimate: parameters.newEstimate,
                    reduceBy: parameters.reduceBy,
                    expand: parameters.expand,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                },
                data: {
                    author: parameters.author,
                    comment: comment, // todo eslint
                    created: parameters.created,
                    id: parameters.id,
                    issueId: parameters.issueId,
                    properties: parameters.properties,
                    self: parameters.self,
                    started: parameters.started,
                    timeSpent: parameters.timeSpent,
                    timeSpentSeconds: parameters.timeSpentSeconds,
                    updateAuthor: parameters.updateAuthor,
                    updated: parameters.updated,
                    visibility: parameters.visibility,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkDeleteWorklogs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog`,
                method: 'DELETE',
                params: {
                    adjustEstimate: parameters.adjustEstimate,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                },
                data: {
                    ids: parameters.ids,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkMoveWorklogs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/move`,
                method: 'POST',
                params: {
                    adjustEstimate: parameters.adjustEstimate,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                },
                data: parameters.worklogs,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let comment;
            if (typeof parameters.comment === 'string') {
                comment = {
                    type: 'doc',
                    version: 1,
                    content: [
                        {
                            type: 'paragraph',
                            content: [
                                {
                                    type: 'text',
                                    text: parameters.comment,
                                },
                            ],
                        },
                    ],
                };
            }
            else {
                comment = parameters.comment;
            }
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
                method: 'PUT',
                params: {
                    notifyUsers: parameters.notifyUsers,
                    adjustEstimate: parameters.adjustEstimate,
                    newEstimate: parameters.newEstimate,
                    expand: parameters.expand,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                },
                data: {
                    comment,
                    visibility: parameters.visibility,
                    started: parameters.started,
                    timeSpent: parameters.timeSpent,
                    timeSpentSeconds: parameters.timeSpentSeconds,
                    properties: parameters.properties,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteWorklog(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/worklog/${parameters.id}`,
                method: 'DELETE',
                params: {
                    notifyUsers: parameters.notifyUsers,
                    adjustEstimate: parameters.adjustEstimate,
                    newEstimate: parameters.newEstimate,
                    increaseBy: parameters.increaseBy,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIdsOfWorklogsDeletedSince(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/worklog/deleted',
                method: 'GET',
                params: {
                    since: parameters === null || parameters === void 0 ? void 0 : parameters.since,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorklogsForIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/worklog/list',
                method: 'POST',
                params: {
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
                data: {
                    ids: parameters === null || parameters === void 0 ? void 0 : parameters.ids,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIdsOfWorklogsModifiedSince(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/worklog/updated',
                method: 'GET',
                params: {
                    since: parameters === null || parameters === void 0 ? void 0 : parameters.since,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueWorklogs = IssueWorklogs;
//# sourceMappingURL=issueWorklogs.js.map