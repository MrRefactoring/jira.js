"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhooks = void 0;
const tslib_1 = require("tslib");
class Webhooks {
    constructor(client) {
        this.client = client;
    }
    getDynamicWebhooksForApp(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/webhook',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    registerDynamicWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/webhook',
                method: 'POST',
                data: {
                    url: parameters.url,
                    webhooks: parameters.webhooks,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteWebhookById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/webhook',
                method: 'DELETE',
                data: {
                    webhookIds: parameters.webhookIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getFailedWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/webhook/failed',
                method: 'GET',
                params: {
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    after: parameters === null || parameters === void 0 ? void 0 : parameters.after,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    refreshWebhooks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/webhook/refresh',
                method: 'PUT',
                data: {
                    webhookIds: parameters.webhookIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Webhooks = Webhooks;
//# sourceMappingURL=webhooks.js.map