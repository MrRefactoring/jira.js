"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrioritySchemes = void 0;
const tslib_1 = require("tslib");
const paramSerializer_1 = require("../paramSerializer");
class PrioritySchemes {
    constructor(client) {
        this.client = client;
    }
    getPrioritySchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/priorityscheme',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    priorityId: (0, paramSerializer_1.paramSerializer)('priorityId', parameters === null || parameters === void 0 ? void 0 : parameters.priorityId),
                    schemeId: (0, paramSerializer_1.paramSerializer)('schemeId', parameters === null || parameters === void 0 ? void 0 : parameters.schemeId),
                    schemeName: parameters === null || parameters === void 0 ? void 0 : parameters.schemeName,
                    onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createPriorityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/priorityscheme',
                method: 'POST',
                data: {
                    defaultPriorityId: parameters.defaultPriorityId,
                    description: parameters.description,
                    mappings: parameters.mappings,
                    name: parameters.name,
                    priorityIds: parameters.priorityIds,
                    projectIds: parameters.projectIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    suggestedPrioritiesForMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/priorityscheme/mappings',
                method: 'POST',
                data: {
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    priorities: parameters === null || parameters === void 0 ? void 0 : parameters.priorities,
                    projects: parameters === null || parameters === void 0 ? void 0 : parameters.projects,
                    schemeId: parameters === null || parameters === void 0 ? void 0 : parameters.schemeId,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAvailablePrioritiesByPriorityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/priorityscheme/priorities/available',
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    query: parameters.query,
                    schemeId: parameters.schemeId,
                    exclude: parameters.exclude,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updatePriorityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/priorityscheme/${parameters.schemeId}`,
                method: 'PUT',
                data: {
                    defaultPriorityId: parameters.defaultPriorityId,
                    description: parameters.description,
                    mappings: parameters.mappings,
                    name: parameters.name,
                    priorities: parameters.priorities,
                    projects: parameters.projects,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deletePriorityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/priorityscheme/${parameters.schemeId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPrioritiesByPriorityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/priorityscheme/${parameters.schemeId}/priorities`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectsByPriorityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/priorityscheme/${parameters.schemeId}/projects`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    projectId: (0, paramSerializer_1.paramSerializer)('projectId', parameters.projectId),
                    query: parameters.query,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.PrioritySchemes = PrioritySchemes;
//# sourceMappingURL=prioritySchemes.js.map