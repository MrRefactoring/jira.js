"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueFieldConfigurations = void 0;
const tslib_1 = require("tslib");
class IssueFieldConfigurations {
    constructor(client) {
        this.client = client;
    }
    getAllFieldConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/fieldconfiguration',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    isDefault: parameters === null || parameters === void 0 ? void 0 : parameters.isDefault,
                    query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/fieldconfiguration',
                method: 'POST',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/fieldconfiguration/${parameters.id}`,
                method: 'PUT',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/fieldconfiguration/${parameters.id}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getFieldConfigurationItems(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/fieldconfiguration/${parameters.id}/fields`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateFieldConfigurationItems(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/fieldconfiguration/${parameters.id}/fields`,
                method: 'PUT',
                data: {
                    fieldConfigurationItems: parameters.fieldConfigurationItems,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAllFieldConfigurationSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/fieldconfigurationscheme',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/fieldconfigurationscheme',
                method: 'POST',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getFieldConfigurationSchemeMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/fieldconfigurationscheme/mapping',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    fieldConfigurationSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.fieldConfigurationSchemeId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getFieldConfigurationSchemeProjectMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/fieldconfigurationscheme/project',
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    projectId: parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    assignFieldConfigurationSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/fieldconfigurationscheme/project',
                method: 'PUT',
                data: {
                    fieldConfigurationSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.fieldConfigurationSchemeId,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/fieldconfigurationscheme/${parameters.id}`,
                method: 'PUT',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/fieldconfigurationscheme/${parameters.id}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setFieldConfigurationSchemeMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/fieldconfigurationscheme/${parameters.id}/mapping`,
                method: 'PUT',
                data: {
                    mappings: parameters.mappings,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeIssueTypesFromGlobalFieldConfigurationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/fieldconfigurationscheme/${parameters.id}/mapping/delete`,
                method: 'POST',
                data: {
                    issueTypeIds: parameters.issueTypeIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueFieldConfigurations = IssueFieldConfigurations;
//# sourceMappingURL=issueFieldConfigurations.js.map