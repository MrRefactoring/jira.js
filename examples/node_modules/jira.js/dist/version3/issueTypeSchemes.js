"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueTypeSchemes = void 0;
const tslib_1 = require("tslib");
class IssueTypeSchemes {
    constructor(client) {
        this.client = client;
    }
    getAllIssueTypeSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescheme',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescheme',
                method: 'POST',
                data: {
                    defaultIssueTypeId: parameters.defaultIssueTypeId,
                    description: parameters.description,
                    issueTypeIds: parameters.issueTypeIds,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueTypeSchemesMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescheme/mapping',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    issueTypeSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeSchemeId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueTypeSchemeForProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescheme/project',
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    projectId: parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    assignIssueTypeSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescheme/project',
                method: 'PUT',
                data: {
                    issueTypeSchemeId: parameters.issueTypeSchemeId,
                    projectId: parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}`,
                method: 'PUT',
                data: {
                    defaultIssueTypeId: parameters.defaultIssueTypeId,
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addIssueTypesToIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype`,
                method: 'PUT',
                data: {
                    issueTypeIds: parameters.issueTypeIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    reorderIssueTypesInIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype/move`,
                method: 'PUT',
                data: {
                    after: parameters.after,
                    issueTypeIds: parameters.issueTypeIds,
                    position: parameters.position,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeIssueTypeFromIssueTypeScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescheme/${parameters.issueTypeSchemeId}/issuetype/${parameters.issueTypeId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueTypeSchemes = IssueTypeSchemes;
//# sourceMappingURL=issueTypeSchemes.js.map