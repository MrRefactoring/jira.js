"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterSharing = void 0;
const tslib_1 = require("tslib");
class FilterSharing {
    constructor(client) {
        this.client = client;
    }
    getDefaultShareScope(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/filter/defaultShareScope',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setDefaultShareScope(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const scope = typeof parameters === 'string' ? parameters : parameters.scope;
            const config = {
                url: '/rest/api/3/filter/defaultShareScope',
                method: 'PUT',
                data: {
                    scope,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSharePermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/3/filter/${id}/permission`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/filter/${parameters.id}/permission`,
                method: 'POST',
                data: {
                    accountId: parameters.accountId,
                    groupId: parameters.groupId,
                    groupname: parameters.groupname,
                    projectId: parameters.projectId,
                    projectRoleId: parameters.projectRoleId,
                    rights: parameters.rights,
                    type: parameters.type,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/filter/${parameters.id}/permission/${parameters.permissionId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteSharePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/filter/${parameters.id}/permission/${parameters.permissionId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.FilterSharing = FilterSharing;
//# sourceMappingURL=filterSharing.js.map