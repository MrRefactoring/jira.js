"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workflows = void 0;
const tslib_1 = require("tslib");
const paramSerializer_1 = require("../paramSerializer");
class Workflows {
    constructor(client) {
        this.client = client;
    }
    createWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflow',
                method: 'POST',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                    statuses: parameters.statuses,
                    transitions: parameters.transitions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkflowsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflow/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    workflowName: (0, paramSerializer_1.paramSerializer)('workflowName', parameters === null || parameters === void 0 ? void 0 : parameters.workflowName),
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    isActive: parameters === null || parameters === void 0 ? void 0 : parameters.isActive,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    /**
     * Deletes a workflow.
     *
     * The workflow cannot be deleted if it is:
     *
     * - An active workflow.
     * - A system workflow.
     * - Associated with any workflow scheme.
     * - Associated with any draft workflow scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deleteInactiveWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const entityId = typeof parameters === 'string' ? parameters : parameters.entityId;
            const config = {
                url: `/rest/api/3/workflow/${entityId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkflowProjectIssueTypeUsages(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/workflow/${parameters.workflowId}/project/${parameters.projectId}/issueTypeUsages`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectUsagesForWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/workflow/${parameters.workflowId}/projectUsages`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkflowSchemeUsagesForWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/workflow/${parameters.workflowId}/workflowSchemes`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    readWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflows',
                method: 'POST',
                params: {
                    useTransitionLinksFormat: parameters === null || parameters === void 0 ? void 0 : parameters.useTransitionLinksFormat,
                    useApprovalConfiguration: parameters === null || parameters === void 0 ? void 0 : parameters.useApprovalConfiguration,
                },
                data: {
                    projectAndIssueTypes: parameters === null || parameters === void 0 ? void 0 : parameters.projectAndIssueTypes,
                    workflowIds: parameters === null || parameters === void 0 ? void 0 : parameters.workflowIds,
                    workflowNames: parameters === null || parameters === void 0 ? void 0 : parameters.workflowNames,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    workflowCapabilities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflows/capabilities',
                method: 'GET',
                params: {
                    workflowId: parameters === null || parameters === void 0 ? void 0 : parameters.workflowId,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                    issueTypeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflows/create',
                method: 'POST',
                data: {
                    scope: parameters.scope,
                    statuses: parameters.statuses,
                    workflows: parameters.workflows,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    validateCreateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflows/create/validation',
                method: 'POST',
                data: {
                    payload: parameters.payload,
                    validationOptions: parameters.validationOptions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflows/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    scope: parameters === null || parameters === void 0 ? void 0 : parameters.scope,
                    isActive: parameters === null || parameters === void 0 ? void 0 : parameters.isActive,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflows/update',
                method: 'POST',
                params: {
                    expand: parameters.expand,
                },
                data: {
                    statuses: parameters.statuses,
                    workflows: parameters.workflows,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    validateUpdateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/workflows/update/validation',
                method: 'POST',
                data: {
                    payload: parameters.payload,
                    validationOptions: parameters.validationOptions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Workflows = Workflows;
//# sourceMappingURL=workflows.js.map