"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueTypeScreenSchemes = void 0;
const tslib_1 = require("tslib");
class IssueTypeScreenSchemes {
    constructor(client) {
        this.client = client;
    }
    getIssueTypeScreenSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescreenscheme',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescreenscheme',
                method: 'POST',
                data: {
                    description: parameters.description,
                    issueTypeMappings: parameters.issueTypeMappings,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueTypeScreenSchemeMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescreenscheme/mapping',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    issueTypeScreenSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeScreenSchemeId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueTypeScreenSchemeProjectAssociations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescreenscheme/project',
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    projectId: parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    assignIssueTypeScreenSchemeToProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuetypescreenscheme/project',
                method: 'PUT',
                data: {
                    issueTypeScreenSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeScreenSchemeId,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}`,
                method: 'PUT',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    appendMappingsForIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping`,
                method: 'PUT',
                data: {
                    issueTypeMappings: parameters.issueTypeMappings,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateDefaultScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping/default`,
                method: 'PUT',
                data: {
                    screenSchemeId: parameters.screenSchemeId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeMappingsFromIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/mapping/remove`,
                method: 'POST',
                data: {
                    issueTypeIds: parameters.issueTypeIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectsForIssueTypeScreenScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuetypescreenscheme/${parameters.issueTypeScreenSchemeId}/project`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    query: parameters.query,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueTypeScreenSchemes = IssueTypeScreenSchemes;
//# sourceMappingURL=issueTypeScreenSchemes.js.map