"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueBulkOperations = void 0;
const tslib_1 = require("tslib");
class IssueBulkOperations {
    constructor(client) {
        this.client = client;
    }
    submitBulkDelete(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/bulk/issues/delete',
                method: 'POST',
                data: {
                    selectedIssueIdsOrKeys: parameters.selectedIssueIdsOrKeys,
                    sendBulkNotification: parameters.sendBulkNotification,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getBulkEditableFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/bulk/issues/fields',
                method: 'GET',
                params: {
                    issueIdsOrKeys: parameters.issueIdsOrKeys,
                    searchText: parameters.searchText,
                    endingBefore: parameters.endingBefore,
                    startingAfter: parameters.startingAfter,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    submitBulkEdit(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/bulk/issues/fields',
                method: 'POST',
                data: {
                    editedFieldsInput: parameters.editedFieldsInput,
                    selectedActions: parameters.selectedActions,
                    selectedIssueIdsOrKeys: parameters.selectedIssueIdsOrKeys,
                    sendBulkNotification: parameters.sendBulkNotification,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    submitBulkMove(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/bulk/issues/move',
                method: 'POST',
                data: {
                    sendBulkNotification: parameters.sendBulkNotification,
                    targetToSourcesMapping: parameters.targetToSourcesMapping,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAvailableTransitions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/bulk/issues/transition',
                method: 'GET',
                params: {
                    issueIdsOrKeys: parameters.issueIdsOrKeys,
                    endingBefore: parameters.endingBefore,
                    startingAfter: parameters.startingAfter,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    submitBulkTransition(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/bulk/issues/transition',
                method: 'POST',
                data: {
                    bulkTransitionInputs: parameters.bulkTransitionInputs,
                    sendBulkNotification: parameters.sendBulkNotification,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getBulkOperationProgress(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/bulk/queue/${parameters.taskId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueBulkOperations = IssueBulkOperations;
//# sourceMappingURL=issueBulkOperations.js.map