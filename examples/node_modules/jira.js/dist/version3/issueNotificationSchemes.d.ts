import type * as Models from './models';
import type * as Parameters from './parameters';
import type { Client } from '../clients';
import type { Callback } from '../callback';
export declare class IssueNotificationSchemes {
    private client;
    constructor(client: Client);
    /**
     * Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of
     * [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.
     *
     * _Note that you should allow for events without recipients to appear in responses._
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * Permission to access Jira, however, the user must have permission to administer at least one project associated
     * with a notification scheme for it to be returned.
     */
    getNotificationSchemes<T = Models.PageNotificationScheme>(parameters: Parameters.GetNotificationSchemes | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of
     * [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.
     *
     * _Note that you should allow for events without recipients to appear in responses._
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * Permission to access Jira, however, the user must have permission to administer at least one project associated
     * with a notification scheme for it to be returned.
     */
    getNotificationSchemes<T = Models.PageNotificationScheme>(parameters?: Parameters.GetNotificationSchemes, callback?: never): Promise<T>;
    /**
     * Creates a notification scheme with notifications. You can create up to 1000 notifications per request.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    createNotificationScheme<T = Models.NotificationSchemeId>(parameters: Parameters.CreateNotificationScheme, callback: Callback<T>): Promise<void>;
    /**
     * Creates a notification scheme with notifications. You can create up to 1000 notifications per request.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    createNotificationScheme<T = Models.NotificationSchemeId>(parameters: Parameters.CreateNotificationScheme, callback?: never): Promise<T>;
    /**
     * Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) mapping of
     * project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or
     * project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only
     * company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a
     * default notification scheme. The mappings are ordered by projectId.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getNotificationSchemeToProjectMappings<T = Models.NotificationSchemeAndProjectMappingPage>(parameters: Parameters.GetNotificationSchemeToProjectMappings | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) mapping of
     * project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or
     * project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only
     * company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a
     * default notification scheme. The mappings are ordered by projectId.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getNotificationSchemeToProjectMappings<T = Models.NotificationSchemeAndProjectMappingPage>(parameters?: Parameters.GetNotificationSchemeToProjectMappings, callback?: never): Promise<T>;
    /**
     * Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the
     * recipients who will receive notifications for those events.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * Permission to access Jira, however, the user must have permission to administer at least one project associated
     * with the notification scheme.
     */
    getNotificationScheme<T = Models.NotificationScheme>(parameters: Parameters.GetNotificationScheme | string, callback: Callback<T>): Promise<void>;
    /**
     * Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the
     * recipients who will receive notifications for those events.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * Permission to access Jira, however, the user must have permission to administer at least one project associated
     * with the notification scheme.
     */
    getNotificationScheme<T = Models.NotificationScheme>(parameters: Parameters.GetNotificationScheme | string, callback?: never): Promise<T>;
    /**
     * Updates a notification scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    updateNotificationScheme<T = void>(parameters: Parameters.UpdateNotificationScheme, callback: Callback<T>): Promise<void>;
    /**
     * Updates a notification scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    updateNotificationScheme<T = void>(parameters: Parameters.UpdateNotificationScheme, callback?: never): Promise<T>;
    /**
     * Adds notifications to a notification scheme. You can add up to 1000 notifications per request.
     *
     * _Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the
     * [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details._
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    addNotifications<T = void>(parameters: Parameters.AddNotifications, callback: Callback<T>): Promise<void>;
    /**
     * Adds notifications to a notification scheme. You can add up to 1000 notifications per request.
     *
     * _Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the
     * [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details._
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    addNotifications<T = void>(parameters: Parameters.AddNotifications, callback?: never): Promise<T>;
    /**
     * Deletes a notification scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deleteNotificationScheme<T = void>(parameters: Parameters.DeleteNotificationScheme, callback: Callback<T>): Promise<void>;
    /**
     * Deletes a notification scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deleteNotificationScheme<T = void>(parameters: Parameters.DeleteNotificationScheme, callback?: never): Promise<T>;
    /**
     * Removes a notification from a notification scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    removeNotificationFromNotificationScheme<T = void>(parameters: Parameters.RemoveNotificationFromNotificationScheme, callback: Callback<T>): Promise<void>;
    /**
     * Removes a notification from a notification scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    removeNotificationFromNotificationScheme<T = void>(parameters: Parameters.RemoveNotificationFromNotificationScheme, callback?: never): Promise<T>;
}
