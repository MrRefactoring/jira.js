"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Issues = void 0;
const tslib_1 = require("tslib");
class Issues {
    constructor(client) {
        this.client = client;
    }
    getBulkChangelogs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/changelog/bulkfetch',
                method: 'POST',
                data: {
                    fieldIds: parameters.fieldIds,
                    issueIdsOrKeys: parameters.issueIdsOrKeys,
                    maxResults: parameters.maxResults,
                    nextPageToken: parameters.nextPageToken,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getEvents(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/events',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (typeof parameters.fields.description === 'string') {
                parameters.fields.description = {
                    type: 'doc',
                    version: 1,
                    content: [
                        {
                            type: 'paragraph',
                            content: [
                                {
                                    text: parameters.fields.description,
                                    type: 'text',
                                },
                            ],
                        },
                    ],
                };
            }
            const config = {
                url: '/rest/api/3/issue',
                method: 'POST',
                params: {
                    updateHistory: parameters.updateHistory,
                },
                data: {
                    fields: parameters.fields,
                    historyMetadata: parameters.historyMetadata,
                    properties: parameters.properties,
                    transition: parameters.transition,
                    update: parameters.update,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    archiveIssuesAsync(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issue/archive',
                method: 'POST',
                data: {
                    jql: parameters.jql,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    archiveIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issue/archive',
                method: 'PUT',
                data: {
                    issueIdsOrKeys: parameters.issueIdsOrKeys,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issue/bulk',
                method: 'POST',
                data: {
                    issueUpdates: parameters === null || parameters === void 0 ? void 0 : parameters.issueUpdates,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkFetchIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issue/bulkfetch',
                method: 'POST',
                data: {
                    expand: parameters.expand,
                    fields: parameters.fields,
                    fieldsByKeys: parameters.fieldsByKeys,
                    issueIdsOrKeys: parameters.issueIdsOrKeys,
                    properties: parameters.properties,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCreateIssueMeta(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issue/createmeta',
                method: 'GET',
                params: {
                    projectIds: parameters === null || parameters === void 0 ? void 0 : parameters.projectIds,
                    projectKeys: parameters === null || parameters === void 0 ? void 0 : parameters.projectKeys,
                    issuetypeIds: parameters === null || parameters === void 0 ? void 0 : parameters.issuetypeIds,
                    issuetypeNames: parameters === null || parameters === void 0 ? void 0 : parameters.issuetypeNames,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCreateIssueMetaIssueTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/createmeta/${parameters.projectIdOrKey}/issuetypes`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCreateIssueMetaIssueTypeId(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/createmeta/${parameters.projectIdOrKey}/issuetypes/${parameters.issueTypeId}`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueLimitReport(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issue/limit/report',
                method: 'GET',
                params: {
                    isReturningKeys: parameters === null || parameters === void 0 ? void 0 : parameters.isReturningKeys,
                },
                data: {
                    issuesApproachingLimitParams: parameters === null || parameters === void 0 ? void 0 : parameters.issuesApproachingLimitParams,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    unarchiveIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issue/unarchive',
                method: 'PUT',
                data: {
                    issueIdsOrKeys: parameters.issueIdsOrKeys,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}`,
                method: 'GET',
                params: {
                    fields: parameters.fields,
                    fieldsByKeys: parameters.fieldsByKeys,
                    expand: parameters.expand,
                    properties: parameters.properties,
                    updateHistory: parameters.updateHistory,
                    failFast: parameters.failFast,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    editIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            if (((_a = parameters.fields) === null || _a === void 0 ? void 0 : _a.description) && typeof parameters.fields.description === 'string') {
                const { fields: { description }, } = yield this.getIssue({ issueIdOrKey: parameters.issueIdOrKey });
                parameters.fields.description = {
                    type: 'doc',
                    version: (_b = description === null || description === void 0 ? void 0 : description.version) !== null && _b !== void 0 ? _b : 1,
                    content: [
                        {
                            type: 'paragraph',
                            content: [
                                {
                                    text: parameters.fields.description,
                                    type: 'text',
                                },
                            ],
                        },
                    ],
                };
            }
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}`,
                method: 'PUT',
                params: {
                    notifyUsers: parameters.notifyUsers,
                    overrideScreenSecurity: parameters.overrideScreenSecurity,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                    returnIssue: parameters.returnIssue,
                    expand: parameters.expand,
                },
                data: {
                    fields: parameters.fields,
                    historyMetadata: parameters.historyMetadata,
                    properties: parameters.properties,
                    transition: parameters.transition,
                    update: parameters.update,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}`,
                method: 'DELETE',
                params: {
                    deleteSubtasks: parameters.deleteSubtasks,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    assignIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/assignee`,
                method: 'PUT',
                data: {
                    accountId: parameters.accountId,
                    accountType: parameters.accountType,
                    active: parameters.active,
                    applicationRoles: parameters.applicationRoles,
                    avatarUrls: parameters.avatarUrls,
                    displayName: parameters.displayName,
                    emailAddress: parameters.emailAddress,
                    expand: parameters.expand,
                    groups: parameters.groups,
                    key: parameters.key,
                    locale: parameters.locale,
                    name: parameters.name,
                    self: parameters.self,
                    timeZone: parameters.timeZone,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getChangeLogs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/changelog`,
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getChangeLogsByIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/changelog/list`,
                method: 'POST',
                data: {
                    changelogIds: parameters.changelogIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getEditIssueMeta(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/editmeta`,
                method: 'GET',
                params: {
                    overrideScreenSecurity: parameters.overrideScreenSecurity,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    notify(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/notify`,
                method: 'POST',
                data: {
                    htmlBody: parameters.htmlBody,
                    restrict: parameters.restrict,
                    subject: parameters.subject,
                    textBody: parameters.textBody,
                    to: parameters.to,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getTransitions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/transitions`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                    transitionId: parameters.transitionId,
                    skipRemoteOnlyCondition: parameters.skipRemoteOnlyCondition,
                    includeUnavailableTransitions: parameters.includeUnavailableTransitions,
                    sortByOpsBarAndStatus: parameters.sortByOpsBarAndStatus,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    doTransition(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            if (((_a = parameters.fields) === null || _a === void 0 ? void 0 : _a.description) && typeof parameters.fields.description === 'string') {
                parameters.fields.description = {
                    type: 'doc',
                    version: 1,
                    content: [
                        {
                            type: 'paragraph',
                            content: [
                                {
                                    text: parameters.fields.description,
                                    type: 'text',
                                },
                            ],
                        },
                    ],
                };
            }
            const config = {
                url: `/rest/api/3/issue/${parameters.issueIdOrKey}/transitions`,
                method: 'POST',
                data: {
                    fields: parameters.fields,
                    historyMetadata: parameters.historyMetadata,
                    properties: parameters.properties,
                    transition: parameters.transition,
                    update: parameters.update,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    exportArchivedIssues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issues/archive/export',
                method: 'PUT',
                data: {
                    archivedBy: parameters === null || parameters === void 0 ? void 0 : parameters.archivedBy,
                    archivedDateRange: parameters === null || parameters === void 0 ? void 0 : parameters.archivedDateRange,
                    issueTypes: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypes,
                    projects: parameters === null || parameters === void 0 ? void 0 : parameters.projects,
                    reporters: parameters === null || parameters === void 0 ? void 0 : parameters.reporters,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Issues = Issues;
//# sourceMappingURL=issues.js.map