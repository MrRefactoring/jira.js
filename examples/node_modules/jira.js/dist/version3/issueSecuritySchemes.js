"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueSecuritySchemes = void 0;
const tslib_1 = require("tslib");
class IssueSecuritySchemes {
    constructor(client) {
        this.client = client;
    }
    getIssueSecuritySchemes(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuesecurityschemes',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuesecurityschemes',
                method: 'POST',
                data: {
                    description: parameters.description,
                    levels: parameters.levels,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSecurityLevels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuesecurityschemes/level',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    schemeId: parameters === null || parameters === void 0 ? void 0 : parameters.schemeId,
                    onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setDefaultLevels(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuesecurityschemes/level/default',
                method: 'PUT',
                data: {
                    defaultValues: parameters === null || parameters === void 0 ? void 0 : parameters.defaultValues,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSecurityLevelMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuesecurityschemes/level/member',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    schemeId: parameters === null || parameters === void 0 ? void 0 : parameters.schemeId,
                    levelId: parameters === null || parameters === void 0 ? void 0 : parameters.levelId,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchProjectsUsingSecuritySchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuesecurityschemes/project',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    issueSecuritySchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueSecuritySchemeId,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    associateSchemesToProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuesecurityschemes/project',
                method: 'PUT',
                data: {
                    oldToNewSecurityLevelMappings: parameters.oldToNewSecurityLevelMappings,
                    projectId: parameters.projectId,
                    schemeId: parameters.schemeId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchSecuritySchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/issuesecurityschemes/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuesecurityschemes/${parameters.id}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateIssueSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuesecurityschemes/${parameters.id}`,
                method: 'PUT',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteSecurityScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level`,
                method: 'PUT',
                data: {
                    levels: parameters.levels,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}`,
                method: 'PUT',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}`,
                method: 'DELETE',
                params: {
                    replaceWith: parameters.replaceWith,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addSecurityLevelMembers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}/member`,
                method: 'PUT',
                data: {
                    members: parameters.members,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeMemberFromSecurityLevel(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/issuesecurityschemes/${parameters.schemeId}/level/${parameters.levelId}/member/${parameters.memberId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueSecuritySchemes = IssueSecuritySchemes;
//# sourceMappingURL=issueSecuritySchemes.js.map