"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueNotificationSchemes = void 0;
const tslib_1 = require("tslib");
class IssueNotificationSchemes {
    constructor(client) {
        this.client = client;
    }
    getNotificationSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/notificationscheme',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                    onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/notificationscheme',
                method: 'POST',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                    notificationSchemeEvents: parameters.notificationSchemeEvents,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getNotificationSchemeToProjectMappings(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/notificationscheme/project',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    notificationSchemeId: parameters === null || parameters === void 0 ? void 0 : parameters.notificationSchemeId,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/3/notificationscheme/${id}`,
                method: 'GET',
                params: {
                    expand: typeof parameters !== 'string' && parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/notificationscheme/${parameters.id}`,
                method: 'PUT',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addNotifications(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/notificationscheme/${parameters.id}/notification`,
                method: 'PUT',
                data: {
                    notificationSchemeEvents: parameters.notificationSchemeEvents,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/notificationscheme/${parameters.notificationSchemeId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeNotificationFromNotificationScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/3/notificationscheme/${parameters.notificationSchemeId}/notification/${parameters.notificationId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueNotificationSchemes = IssueNotificationSchemes;
//# sourceMappingURL=issueNotificationSchemes.js.map