"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Users = void 0;
const tslib_1 = require("tslib");
const paramSerializer_1 = require("../paramSerializer");
class Users {
    constructor(client) {
        this.client = client;
    }
    getUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user',
                method: 'GET',
                params: {
                    accountId: parameters.accountId,
                    username: parameters.username,
                    key: parameters.key,
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user',
                method: 'POST',
                data: {
                    emailAddress: parameters.emailAddress,
                    products: parameters.products
                        ? parameters.products
                        : ['jira-core', 'jira-servicedesk', 'jira-product-discovery', 'jira-software'],
                    self: parameters.self,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeUser(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user',
                method: 'DELETE',
                params: {
                    accountId: parameters.accountId,
                    username: parameters.username,
                    key: parameters.key,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkGetUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user/bulk',
                method: 'GET',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                    accountId: (0, paramSerializer_1.paramSerializer)('accountId', parameters.accountId),
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkGetUsersMigration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user/bulk/migration',
                method: 'GET',
                params: {
                    key: (0, paramSerializer_1.paramSerializer)('key', parameters.key),
                    maxResults: parameters.maxResults,
                    startAt: parameters.startAt,
                    username: (0, paramSerializer_1.paramSerializer)('username', parameters.username),
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getUserDefaultColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user/columns',
                method: 'GET',
                params: {
                    accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setUserColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user/columns',
                method: 'PUT',
                params: {
                    accountId: parameters.accountId,
                },
                data: parameters.columns,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    resetUserColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user/columns',
                method: 'DELETE',
                params: {
                    accountId: parameters.accountId,
                    username: parameters.username,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getUserEmail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const accountId = typeof parameters === 'string' ? parameters : parameters.accountId;
            const config = {
                url: '/rest/api/3/user/email',
                method: 'GET',
                params: {
                    accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getUserEmailBulk(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const accountId = typeof parameters === 'string' ? parameters : parameters.accountId;
            const config = {
                url: '/rest/api/3/user/email/bulk',
                method: 'GET',
                params: {
                    accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getUserGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/user/groups',
                method: 'GET',
                params: {
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAllUsersDefault(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/users',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAllUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/3/users/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Users = Users;
//# sourceMappingURL=users.js.map