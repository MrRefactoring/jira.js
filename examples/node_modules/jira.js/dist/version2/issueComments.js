"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueComments = void 0;
const tslib_1 = require("tslib");
class IssueComments {
    constructor(client) {
        this.client = client;
    }
    getCommentsByIds(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/comment/list',
                method: 'POST',
                params: {
                    expand: parameters.expand,
                },
                data: {
                    ids: parameters.ids,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getComments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const issueIdOrKey = typeof parameters === 'string' ? parameters : parameters.issueIdOrKey;
            const config = {
                url: `/rest/api/2/issue/${issueIdOrKey}/comment`,
                method: 'GET',
                params: {
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                    orderBy: typeof parameters !== 'string' && parameters.orderBy,
                    expand: typeof parameters !== 'string' && parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/${parameters.issueIdOrKey}/comment`,
                method: 'POST',
                params: {
                    expand: parameters.expand,
                },
                data: {
                    self: parameters.self,
                    id: parameters.id,
                    author: parameters.author,
                    body: parameters.comment,
                    renderedBody: parameters.renderedBody,
                    updateAuthor: parameters.updateAuthor,
                    created: parameters.created,
                    updated: parameters.updated,
                    visibility: parameters.visibility,
                    jsdPublic: parameters.jsdPublic,
                    jsdAuthorCanSeeRequest: parameters.jsdAuthorCanSeeRequest,
                    properties: parameters.properties,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
                method: 'PUT',
                params: {
                    notifyUsers: parameters.notifyUsers,
                    overrideEditableFlag: parameters.overrideEditableFlag,
                    expand: parameters.expand,
                },
                data: {
                    body: parameters.comment,
                    visibility: parameters.visibility,
                    properties: parameters.properties,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/${parameters.issueIdOrKey}/comment/${parameters.id}`,
                method: 'DELETE',
                params: {
                    parentId: parameters.parentId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueComments = IssueComments;
//# sourceMappingURL=issueComments.js.map