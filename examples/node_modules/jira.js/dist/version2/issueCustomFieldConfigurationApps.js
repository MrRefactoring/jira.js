"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueCustomFieldConfigurationApps = void 0;
const tslib_1 = require("tslib");
class IssueCustomFieldConfigurationApps {
    constructor(client) {
        this.client = client;
    }
    getCustomFieldsConfigurations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/app/field/context/configuration/list',
                method: 'POST',
                params: {
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    fieldContextId: parameters === null || parameters === void 0 ? void 0 : parameters.fieldContextId,
                    issueId: parameters === null || parameters === void 0 ? void 0 : parameters.issueId,
                    projectKeyOrId: parameters === null || parameters === void 0 ? void 0 : parameters.projectKeyOrId,
                    issueTypeId: parameters === null || parameters === void 0 ? void 0 : parameters.issueTypeId,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                },
                data: {
                    fieldIdsOrKeys: parameters === null || parameters === void 0 ? void 0 : parameters.fieldIdsOrKeys,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCustomFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/app/field/${parameters.fieldIdOrKey}/context/configuration`,
                method: 'GET',
                params: {
                    id: parameters.id,
                    fieldContextId: parameters.fieldContextId,
                    issueId: parameters.issueId,
                    projectKeyOrId: parameters.projectKeyOrId,
                    issueTypeId: parameters.issueTypeId,
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateCustomFieldConfiguration(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/app/field/${parameters.fieldIdOrKey}/context/configuration`,
                method: 'PUT',
                data: {
                    configurations: parameters.configurations,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueCustomFieldConfigurationApps = IssueCustomFieldConfigurationApps;
//# sourceMappingURL=issueCustomFieldConfigurationApps.js.map