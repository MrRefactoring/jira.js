"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSearch = void 0;
const tslib_1 = require("tslib");
const paramSerializer_1 = require("../paramSerializer");
class UserSearch {
    constructor(client) {
        this.client = client;
    }
    findBulkAssignableUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/user/assignable/multiProjectSearch',
                method: 'GET',
                params: {
                    query: parameters.query,
                    username: parameters.username,
                    accountId: parameters.accountId,
                    projectKeys: parameters.projectKeys,
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findAssignableUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/user/assignable/search',
                method: 'GET',
                params: {
                    query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
                    sessionId: parameters === null || parameters === void 0 ? void 0 : parameters.sessionId,
                    username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
                    accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
                    project: parameters === null || parameters === void 0 ? void 0 : parameters.project,
                    issueKey: parameters === null || parameters === void 0 ? void 0 : parameters.issueKey,
                    issueId: parameters === null || parameters === void 0 ? void 0 : parameters.issueId,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    actionDescriptorId: parameters === null || parameters === void 0 ? void 0 : parameters.actionDescriptorId,
                    recommend: parameters === null || parameters === void 0 ? void 0 : parameters.recommend,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findUsersWithAllPermissions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/user/permission/search',
                method: 'GET',
                params: {
                    query: parameters.query,
                    username: parameters.username,
                    accountId: parameters.accountId,
                    permissions: parameters.permissions,
                    issueKey: parameters.issueKey,
                    projectKey: parameters.projectKey,
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findUsersForPicker(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/user/picker',
                method: 'GET',
                params: {
                    query: parameters.query,
                    maxResults: parameters.maxResults,
                    showAvatar: parameters.showAvatar,
                    excludeAccountIds: (0, paramSerializer_1.paramSerializer)('excludeAccountIds', parameters.excludeAccountIds),
                    avatarSize: parameters.avatarSize,
                    excludeConnectUsers: parameters.excludeConnectUsers,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/user/search',
                method: 'GET',
                params: {
                    query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
                    username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
                    accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    property: parameters === null || parameters === void 0 ? void 0 : parameters.property,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findUsersByQuery(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/user/search/query',
                method: 'GET',
                params: {
                    query: parameters.query,
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findUserKeysByQuery(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/user/search/query/key',
                method: 'GET',
                params: {
                    query: parameters.query,
                    startAt: parameters.startAt,
                    maxResult: parameters.maxResult || parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    findUsersWithBrowsePermission(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/user/viewissue/search',
                method: 'GET',
                params: {
                    query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
                    username: parameters === null || parameters === void 0 ? void 0 : parameters.username,
                    accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
                    issueKey: parameters === null || parameters === void 0 ? void 0 : parameters.issueKey,
                    projectKey: parameters === null || parameters === void 0 ? void 0 : parameters.projectKey,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.UserSearch = UserSearch;
//# sourceMappingURL=userSearch.js.map