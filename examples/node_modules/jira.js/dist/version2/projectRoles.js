"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectRoles = void 0;
const tslib_1 = require("tslib");
class ProjectRoles {
    constructor(client) {
        this.client = client;
    }
    getProjectRoles(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/2/project/${projectIdOrKey}/role`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
                method: 'GET',
                params: {
                    excludeInactiveUsers: parameters.excludeInactiveUsers,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectRoleDetails(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/2/project/${projectIdOrKey}/roledetails`,
                method: 'GET',
                params: {
                    currentMember: typeof parameters !== 'string' ? parameters.currentMember : undefined,
                    excludeConnectAddons: typeof parameters !== 'string' ? parameters.excludeConnectAddons : undefined,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAllProjectRoles(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/role',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/role',
                method: 'POST',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectRoleById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/role/${id}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    partialUpdateProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/role/${parameters.id}`,
                method: 'POST',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    fullyUpdateProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/role/${parameters.id}`,
                method: 'PUT',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteProjectRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/role/${id}`,
                method: 'DELETE',
                params: {
                    swap: typeof parameters !== 'string' ? parameters.swap : undefined,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ProjectRoles = ProjectRoles;
//# sourceMappingURL=projectRoles.js.map