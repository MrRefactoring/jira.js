"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowTransitionProperties = void 0;
const tslib_1 = require("tslib");
class WorkflowTransitionProperties {
    constructor(client) {
        this.client = client;
    }
    getWorkflowTransitionProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/workflow/transitions/${parameters.transitionId}/properties`,
                method: 'GET',
                params: {
                    includeReservedKeys: parameters.includeReservedKeys,
                    key: parameters.key,
                    workflowName: parameters.workflowName,
                    workflowMode: parameters.workflowMode,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/workflow/transitions/${parameters.transitionId}/properties`,
                method: 'POST',
                params: {
                    key: parameters.key,
                    workflowName: parameters.workflowName,
                    workflowMode: parameters.workflowMode,
                },
                data: Object.assign(Object.assign({}, parameters), { transitionId: undefined, key: undefined, workflowName: undefined, workflowMode: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/workflow/transitions/${parameters.transitionId}/properties`,
                method: 'PUT',
                params: {
                    key: parameters.key,
                    workflowName: parameters.workflowName,
                    workflowMode: parameters.workflowMode,
                },
                data: Object.assign(Object.assign({}, parameters), { transitionId: undefined, key: undefined, workflowName: undefined, workflowMode: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteWorkflowTransitionProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/workflow/transitions/${parameters.transitionId}/properties`,
                method: 'DELETE',
                params: {
                    key: parameters.key,
                    workflowName: parameters.workflowName,
                    workflowMode: parameters.workflowMode,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.WorkflowTransitionProperties = WorkflowTransitionProperties;
//# sourceMappingURL=workflowTransitionProperties.js.map