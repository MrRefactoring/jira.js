"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueResolutions = void 0;
const tslib_1 = require("tslib");
class IssueResolutions {
    constructor(client) {
        this.client = client;
    }
    getResolutions(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/resolution',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/resolution',
                method: 'POST',
                data: parameters,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setDefaultResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/resolution/default',
                method: 'PUT',
                data: {
                    id: parameters.id,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    moveResolutions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/resolution/move',
                method: 'PUT',
                data: {
                    after: parameters.after,
                    ids: parameters.ids,
                    position: parameters.position,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchResolutions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/resolution/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/resolution/${parameters.id}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/resolution/${parameters.id}`,
                method: 'PUT',
                data: Object.assign(Object.assign({}, parameters), { name: parameters.name, id: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteResolution(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/resolution/${parameters.id}`,
                method: 'DELETE',
                params: {
                    replaceWith: parameters.replaceWith,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueResolutions = IssueResolutions;
//# sourceMappingURL=issueResolutions.js.map