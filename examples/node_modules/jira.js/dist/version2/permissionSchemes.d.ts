import type * as Models from './models';
import type * as Parameters from './parameters';
import type { Client } from '../clients';
import type { Callback } from '../callback';
export declare class PermissionSchemes {
    private client;
    constructor(client: Client);
    /**
     * Returns all permission schemes.
     *
     * ### About permission schemes and grants
     *
     * A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a
     * `permission`.
     *
     * #### Holder object
     *
     * The `holder` object contains information about the user or group being granted the permission. For example, the
     * _Administer projects_ permission is granted to a group named _Teams in space administrators_. In this case, the
     * type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and
     * the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.
     *
     * The `holder` object is defined by the following properties:
     *
     * - `type` Identifies the user or group (see the list of types below).
     * - `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the
     *   `type`. For example, if the `type` is a group, then you need to specify the group name.
     * - `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the
     *   group ID. For other `type` it has the same value as `parameter`
     *
     * The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some
     * types may not have a `parameter` or `value`):
     *
     * - `anyone` Grant for anonymous users.
     * - `applicationRole` Grant for users with access to the specified application (application name, application name).
     *   See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
     * - `assignee` Grant for the user currently assigned to an issue.
     * - `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
     * - `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field
     *   ID, `value` : custom field ID).
     * - `projectLead` Grant for a project lead.
     * - `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
     * - `reporter` Grant for the user who reported the issue.
     * - `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not
     *   Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more
     *   information.
     * - `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is
     *   deprecated and the account ID should be used, `value` : user ID).
     * - `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` :
     *   custom field ID).
     *
     * #### Built-in permissions
     *
     * The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define
     * custom permissions. See the [project
     * permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global
     * permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation
     * for more information.
     *
     * **Project permissions**
     *
     * - `ADMINISTER_PROJECTS`
     * - `BROWSE_PROJECTS`
     * - `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
     * - `SERVICEDESK_AGENT` (Jira Service Desk only)
     * - `VIEW_DEV_TOOLS` (Jira Software only)
     * - `VIEW_READONLY_WORKFLOW`
     *
     * **Issue permissions**
     *
     * - `ASSIGNABLE_USER`
     * - `ASSIGN_ISSUES`
     * - `CLOSE_ISSUES`
     * - `CREATE_ISSUES`
     * - `DELETE_ISSUES`
     * - `EDIT_ISSUES`
     * - `LINK_ISSUES`
     * - `MODIFY_REPORTER`
     * - `MOVE_ISSUES`
     * - `RESOLVE_ISSUES`
     * - `SCHEDULE_ISSUES`
     * - `SET_ISSUE_SECURITY`
     * - `TRANSITION_ISSUES`
     *
     * **Voters and watchers permissions**
     *
     * - `MANAGE_WATCHERS`
     * - `VIEW_VOTERS_AND_WATCHERS`
     *
     * **Comments permissions**
     *
     * - `ADD_COMMENTS`
     * - `DELETE_ALL_COMMENTS`
     * - `DELETE_OWN_COMMENTS`
     * - `EDIT_ALL_COMMENTS`
     * - `EDIT_OWN_COMMENTS`
     *
     * **Attachments permissions**
     *
     * - `CREATE_ATTACHMENTS`
     * - `DELETE_ALL_ATTACHMENTS`
     * - `DELETE_OWN_ATTACHMENTS`
     *
     * **Time tracking permissions**
     *
     * - `DELETE_ALL_WORKLOGS`
     * - `DELETE_OWN_WORKLOGS`
     * - `EDIT_ALL_WORKLOGS`
     * - `EDIT_OWN_WORKLOGS`
     * - `WORK_ON_ISSUES`
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getAllPermissionSchemes<T = Models.PermissionSchemes>(parameters: Parameters.GetAllPermissionSchemes | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Returns all permission schemes.
     *
     * ### About permission schemes and grants
     *
     * A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a
     * `permission`.
     *
     * #### Holder object
     *
     * The `holder` object contains information about the user or group being granted the permission. For example, the
     * _Administer projects_ permission is granted to a group named _Teams in space administrators_. In this case, the
     * type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and
     * the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.
     *
     * The `holder` object is defined by the following properties:
     *
     * - `type` Identifies the user or group (see the list of types below).
     * - `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the
     *   `type`. For example, if the `type` is a group, then you need to specify the group name.
     * - `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the
     *   group ID. For other `type` it has the same value as `parameter`
     *
     * The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some
     * types may not have a `parameter` or `value`):
     *
     * - `anyone` Grant for anonymous users.
     * - `applicationRole` Grant for users with access to the specified application (application name, application name).
     *   See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
     * - `assignee` Grant for the user currently assigned to an issue.
     * - `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
     * - `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field
     *   ID, `value` : custom field ID).
     * - `projectLead` Grant for a project lead.
     * - `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
     * - `reporter` Grant for the user who reported the issue.
     * - `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not
     *   Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more
     *   information.
     * - `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is
     *   deprecated and the account ID should be used, `value` : user ID).
     * - `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` :
     *   custom field ID).
     *
     * #### Built-in permissions
     *
     * The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define
     * custom permissions. See the [project
     * permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global
     * permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation
     * for more information.
     *
     * **Project permissions**
     *
     * - `ADMINISTER_PROJECTS`
     * - `BROWSE_PROJECTS`
     * - `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
     * - `SERVICEDESK_AGENT` (Jira Service Desk only)
     * - `VIEW_DEV_TOOLS` (Jira Software only)
     * - `VIEW_READONLY_WORKFLOW`
     *
     * **Issue permissions**
     *
     * - `ASSIGNABLE_USER`
     * - `ASSIGN_ISSUES`
     * - `CLOSE_ISSUES`
     * - `CREATE_ISSUES`
     * - `DELETE_ISSUES`
     * - `EDIT_ISSUES`
     * - `LINK_ISSUES`
     * - `MODIFY_REPORTER`
     * - `MOVE_ISSUES`
     * - `RESOLVE_ISSUES`
     * - `SCHEDULE_ISSUES`
     * - `SET_ISSUE_SECURITY`
     * - `TRANSITION_ISSUES`
     *
     * **Voters and watchers permissions**
     *
     * - `MANAGE_WATCHERS`
     * - `VIEW_VOTERS_AND_WATCHERS`
     *
     * **Comments permissions**
     *
     * - `ADD_COMMENTS`
     * - `DELETE_ALL_COMMENTS`
     * - `DELETE_OWN_COMMENTS`
     * - `EDIT_ALL_COMMENTS`
     * - `EDIT_OWN_COMMENTS`
     *
     * **Attachments permissions**
     *
     * - `CREATE_ATTACHMENTS`
     * - `DELETE_ALL_ATTACHMENTS`
     * - `DELETE_OWN_ATTACHMENTS`
     *
     * **Time tracking permissions**
     *
     * - `DELETE_ALL_WORKLOGS`
     * - `DELETE_OWN_WORKLOGS`
     * - `EDIT_ALL_WORKLOGS`
     * - `EDIT_OWN_WORKLOGS`
     * - `WORK_ON_ISSUES`
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getAllPermissionSchemes<T = Models.PermissionSchemes>(parameters?: Parameters.GetAllPermissionSchemes, callback?: never): Promise<T>;
    /**
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission
     * grants.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    createPermissionScheme<T = Models.PermissionScheme>(parameters: Parameters.CreatePermissionScheme | undefined, callback: Callback<T>): Promise<void>;
    /**
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission
     * grants.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    createPermissionScheme<T = Models.PermissionScheme>(parameters?: Parameters.CreatePermissionScheme, callback?: never): Promise<T>;
    /**
     * Returns a permission scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getPermissionScheme<T = Models.PermissionScheme>(parameters: Parameters.GetPermissionScheme | string, callback: Callback<T>): Promise<void>;
    /**
     * Returns a permission scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getPermissionScheme<T = Models.PermissionScheme>(parameters: Parameters.GetPermissionScheme | string, callback?: never): Promise<T>;
    /**
     * Updates a permission scheme. Below are some important things to note when using this resource:
     *
     * - If a permissions list is present in the request, then it is set in the permission scheme, overwriting _all
     *   existing_ grants.
     * - If you want to update only the name and description, then do not send a permissions list in the request.
     * - Sending an empty list will remove all permission grants from the permission scheme.
     *
     * If you want to add or delete a permission grant instead of updating the whole list, see [Create permission
     * grant](#api-rest-api-2-permissionscheme-schemeId-permission-post) or [Delete permission scheme
     * entity](#api-rest-api-2-permissionscheme-schemeId-permission-permissionId-delete).
     *
     * See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for
     * more details.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    updatePermissionScheme<T = Models.PermissionScheme>(parameters: Parameters.UpdatePermissionScheme, callback: Callback<T>): Promise<void>;
    /**
     * Updates a permission scheme. Below are some important things to note when using this resource:
     *
     * - If a permissions list is present in the request, then it is set in the permission scheme, overwriting _all
     *   existing_ grants.
     * - If you want to update only the name and description, then do not send a permissions list in the request.
     * - Sending an empty list will remove all permission grants from the permission scheme.
     *
     * If you want to add or delete a permission grant instead of updating the whole list, see [Create permission
     * grant](#api-rest-api-2-permissionscheme-schemeId-permission-post) or [Delete permission scheme
     * entity](#api-rest-api-2-permissionscheme-schemeId-permission-permissionId-delete).
     *
     * See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for
     * more details.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    updatePermissionScheme<T = Models.PermissionScheme>(parameters: Parameters.UpdatePermissionScheme, callback?: never): Promise<T>;
    /**
     * Deletes a permission scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deletePermissionScheme<T = void>(parameters: Parameters.DeletePermissionScheme, callback: Callback<T>): Promise<void>;
    /**
     * Deletes a permission scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deletePermissionScheme<T = void>(parameters: Parameters.DeletePermissionScheme, callback?: never): Promise<T>;
    /**
     * Returns all permission grants for a permission scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getPermissionSchemeGrants<T = Models.PermissionGrants>(parameters: Parameters.GetPermissionSchemeGrants, callback: Callback<T>): Promise<void>;
    /**
     * Returns all permission grants for a permission scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getPermissionSchemeGrants<T = Models.PermissionGrants>(parameters: Parameters.GetPermissionSchemeGrants, callback?: never): Promise<T>;
    /**
     * Creates a permission grant in a permission scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    createPermissionGrant<T = Models.PermissionGrant>(parameters: Parameters.CreatePermissionGrant, callback: Callback<T>): Promise<void>;
    /**
     * Creates a permission grant in a permission scheme.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    createPermissionGrant<T = Models.PermissionGrant>(parameters: Parameters.CreatePermissionGrant, callback?: never): Promise<T>;
    /**
     * Returns a permission grant.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getPermissionSchemeGrant<T = Models.PermissionGrant>(parameters: Parameters.GetPermissionSchemeGrant, callback: Callback<T>): Promise<void>;
    /**
     * Returns a permission grant.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * Permission to access Jira.
     */
    getPermissionSchemeGrant<T = Models.PermissionGrant>(parameters: Parameters.GetPermissionSchemeGrant, callback?: never): Promise<T>;
    /**
     * Deletes a permission grant from a permission scheme. See [About permission schemes and
     * grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deletePermissionSchemeEntity<T = void>(parameters: Parameters.DeletePermissionSchemeEntity, callback: Callback<T>): Promise<void>;
    /**
     * Deletes a permission grant from a permission scheme. See [About permission schemes and
     * grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
     *
     * **[Permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v2/intro/#permissions) required:**
     * _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    deletePermissionSchemeEntity<T = void>(parameters: Parameters.DeletePermissionSchemeEntity, callback?: never): Promise<T>;
}
