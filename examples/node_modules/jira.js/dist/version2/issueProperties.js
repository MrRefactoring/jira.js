"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueProperties = void 0;
const tslib_1 = require("tslib");
class IssueProperties {
    constructor(client) {
        this.client = client;
    }
    bulkSetIssuesProperties(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/issue/properties',
                method: 'POST',
                data: {
                    entitiesIds: parameters === null || parameters === void 0 ? void 0 : parameters.entitiesIds,
                    properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkSetIssuePropertiesByIssue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/issue/properties/multi',
                method: 'POST',
                data: {
                    issues: parameters === null || parameters === void 0 ? void 0 : parameters.issues,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkSetIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/properties/${parameters.propertyKey}`,
                method: 'PUT',
                data: {
                    value: parameters.value,
                    expression: parameters.expression,
                    filter: parameters.filter,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    bulkDeleteIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/properties/${parameters.propertyKey}`,
                method: 'DELETE',
                data: {
                    entityIds: parameters.entityIds,
                    currentValue: parameters.currentValue,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssuePropertyKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const issueIdOrKey = typeof parameters === 'string' ? parameters : parameters.issueIdOrKey;
            const config = {
                url: `/rest/api/2/issue/${issueIdOrKey}/properties`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
                method: 'PUT',
                data: parameters.propertyValue,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteIssueProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/issue/${parameters.issueIdOrKey}/properties/${parameters.propertyKey}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueProperties = IssueProperties;
//# sourceMappingURL=issueProperties.js.map