"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JqlFunctionsApps = void 0;
const tslib_1 = require("tslib");
class JqlFunctionsApps {
    constructor(client) {
        this.client = client;
    }
    getPrecomputations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/jql/function/computation',
                method: 'GET',
                params: {
                    functionKey: parameters === null || parameters === void 0 ? void 0 : parameters.functionKey,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    filter: parameters === null || parameters === void 0 ? void 0 : parameters.filter,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updatePrecomputations(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/jql/function/computation',
                method: 'POST',
                params: {
                    skipNotFoundPrecomputations: parameters.skipNotFoundPrecomputations,
                },
                data: {
                    values: parameters.values,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPrecomputationsByID(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/jql/function/computation/search',
                method: 'POST',
                params: {
                    orderBy: parameters.orderBy,
                },
                data: {
                    precomputationIDs: parameters.precomputationIDs,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.JqlFunctionsApps = JqlFunctionsApps;
//# sourceMappingURL=jqlFunctionsApps.js.map