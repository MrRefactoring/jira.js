"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Version2Client = void 0;
const baseClient_1 = require("../../clients/baseClient");
const announcementBanner_1 = require("../announcementBanner");
const appDataPolicies_1 = require("../appDataPolicies");
const applicationRoles_1 = require("../applicationRoles");
const appMigration_1 = require("../appMigration");
const appProperties_1 = require("../appProperties");
const auditRecords_1 = require("../auditRecords");
const avatars_1 = require("../avatars");
const classificationLevels_1 = require("../classificationLevels");
const dashboards_1 = require("../dashboards");
const dynamicModules_1 = require("../dynamicModules");
const filters_1 = require("../filters");
const filterSharing_1 = require("../filterSharing");
const groupAndUserPicker_1 = require("../groupAndUserPicker");
const groups_1 = require("../groups");
const issueAttachments_1 = require("../issueAttachments");
const issueCommentProperties_1 = require("../issueCommentProperties");
const issueComments_1 = require("../issueComments");
const issueCustomFieldConfigurationApps_1 = require("../issueCustomFieldConfigurationApps");
const issueCustomFieldContexts_1 = require("../issueCustomFieldContexts");
const issueCustomFieldOptions_1 = require("../issueCustomFieldOptions");
const issueCustomFieldOptionsApps_1 = require("../issueCustomFieldOptionsApps");
const issueCustomFieldValuesApps_1 = require("../issueCustomFieldValuesApps");
const issueFieldConfigurations_1 = require("../issueFieldConfigurations");
const issueFields_1 = require("../issueFields");
const issueLinks_1 = require("../issueLinks");
const issueLinkTypes_1 = require("../issueLinkTypes");
const issueNavigatorSettings_1 = require("../issueNavigatorSettings");
const issueNotificationSchemes_1 = require("../issueNotificationSchemes");
const issuePriorities_1 = require("../issuePriorities");
const issueProperties_1 = require("../issueProperties");
const issueRemoteLinks_1 = require("../issueRemoteLinks");
const issueResolutions_1 = require("../issueResolutions");
const issues_1 = require("../issues");
const issueSearch_1 = require("../issueSearch");
const issueSecurityLevel_1 = require("../issueSecurityLevel");
const issueSecuritySchemes_1 = require("../issueSecuritySchemes");
const issueTypeProperties_1 = require("../issueTypeProperties");
const issueTypes_1 = require("../issueTypes");
const issueTypeSchemes_1 = require("../issueTypeSchemes");
const issueTypeScreenSchemes_1 = require("../issueTypeScreenSchemes");
const issueVotes_1 = require("../issueVotes");
const issueWatchers_1 = require("../issueWatchers");
const issueWorklogProperties_1 = require("../issueWorklogProperties");
const issueWorklogs_1 = require("../issueWorklogs");
const jiraExpressions_1 = require("../jiraExpressions");
const jiraSettings_1 = require("../jiraSettings");
const jQL_1 = require("../jQL");
const jqlFunctionsApps_1 = require("../jqlFunctionsApps");
const labels_1 = require("../labels");
const licenseMetrics_1 = require("../licenseMetrics");
const myself_1 = require("../myself");
const permissions_1 = require("../permissions");
const permissionSchemes_1 = require("../permissionSchemes");
const plans_1 = require("../plans");
const prioritySchemes_1 = require("../prioritySchemes");
const projectAvatars_1 = require("../projectAvatars");
const projectCategories_1 = require("../projectCategories");
const projectClassificationLevels_1 = require("../projectClassificationLevels");
const projectComponents_1 = require("../projectComponents");
const projectEmail_1 = require("../projectEmail");
const projectFeatures_1 = require("../projectFeatures");
const projectKeyAndNameValidation_1 = require("../projectKeyAndNameValidation");
const projectPermissionSchemes_1 = require("../projectPermissionSchemes");
const projectProperties_1 = require("../projectProperties");
const projectRoleActors_1 = require("../projectRoleActors");
const projectRoles_1 = require("../projectRoles");
const projects_1 = require("../projects");
const projectTypes_1 = require("../projectTypes");
const projectVersions_1 = require("../projectVersions");
const screens_1 = require("../screens");
const screenSchemes_1 = require("../screenSchemes");
const screenTabFields_1 = require("../screenTabFields");
const screenTabs_1 = require("../screenTabs");
const serverInfo_1 = require("../serverInfo");
const serviceRegistry_1 = require("../serviceRegistry");
const status_1 = require("../status");
const tasks_1 = require("../tasks");
const teamsInPlan_1 = require("../teamsInPlan");
const timeTracking_1 = require("../timeTracking");
const uIModificationsApps_1 = require("../uIModificationsApps");
const userProperties_1 = require("../userProperties");
const users_1 = require("../users");
const userSearch_1 = require("../userSearch");
const webhooks_1 = require("../webhooks");
const workflows_1 = require("../workflows");
const workflowSchemeDrafts_1 = require("../workflowSchemeDrafts");
const workflowSchemeProjectAssociations_1 = require("../workflowSchemeProjectAssociations");
const workflowSchemes_1 = require("../workflowSchemes");
const workflowStatusCategories_1 = require("../workflowStatusCategories");
const workflowStatuses_1 = require("../workflowStatuses");
const workflowTransitionProperties_1 = require("../workflowTransitionProperties");
const workflowTransitionRules_1 = require("../workflowTransitionRules");
class Version2Client extends baseClient_1.BaseClient {
    constructor() {
        super(...arguments);
        this.announcementBanner = new announcementBanner_1.AnnouncementBanner(this);
        this.appDataPolicies = new appDataPolicies_1.AppDataPolicies(this);
        this.applicationRoles = new applicationRoles_1.ApplicationRoles(this);
        this.appMigration = new appMigration_1.AppMigration(this);
        this.appProperties = new appProperties_1.AppProperties(this);
        this.auditRecords = new auditRecords_1.AuditRecords(this);
        this.avatars = new avatars_1.Avatars(this);
        this.classificationLevels = new classificationLevels_1.ClassificationLevels(this);
        this.dashboards = new dashboards_1.Dashboards(this);
        this.dynamicModules = new dynamicModules_1.DynamicModules(this);
        this.filters = new filters_1.Filters(this);
        this.filterSharing = new filterSharing_1.FilterSharing(this);
        this.groupAndUserPicker = new groupAndUserPicker_1.GroupAndUserPicker(this);
        this.groups = new groups_1.Groups(this);
        this.issueAttachments = new issueAttachments_1.IssueAttachments(this);
        this.issueCommentProperties = new issueCommentProperties_1.IssueCommentProperties(this);
        this.issueComments = new issueComments_1.IssueComments(this);
        this.issueCustomFieldConfigurationApps = new issueCustomFieldConfigurationApps_1.IssueCustomFieldConfigurationApps(this);
        this.issueCustomFieldContexts = new issueCustomFieldContexts_1.IssueCustomFieldContexts(this);
        this.issueCustomFieldOptions = new issueCustomFieldOptions_1.IssueCustomFieldOptions(this);
        this.issueCustomFieldOptionsApps = new issueCustomFieldOptionsApps_1.IssueCustomFieldOptionsApps(this);
        this.issueCustomFieldValuesApps = new issueCustomFieldValuesApps_1.IssueCustomFieldValuesApps(this);
        this.issueFieldConfigurations = new issueFieldConfigurations_1.IssueFieldConfigurations(this);
        this.issueFields = new issueFields_1.IssueFields(this);
        this.issueLinks = new issueLinks_1.IssueLinks(this);
        this.issueLinkTypes = new issueLinkTypes_1.IssueLinkTypes(this);
        this.issueNavigatorSettings = new issueNavigatorSettings_1.IssueNavigatorSettings(this);
        this.issueNotificationSchemes = new issueNotificationSchemes_1.IssueNotificationSchemes(this);
        this.issuePriorities = new issuePriorities_1.IssuePriorities(this);
        this.issueProperties = new issueProperties_1.IssueProperties(this);
        this.issueRemoteLinks = new issueRemoteLinks_1.IssueRemoteLinks(this);
        this.issueResolutions = new issueResolutions_1.IssueResolutions(this);
        this.issues = new issues_1.Issues(this);
        this.issueSearch = new issueSearch_1.IssueSearch(this);
        this.issueSecurityLevel = new issueSecurityLevel_1.IssueSecurityLevel(this);
        this.issueSecuritySchemes = new issueSecuritySchemes_1.IssueSecuritySchemes(this);
        this.issueTypeProperties = new issueTypeProperties_1.IssueTypeProperties(this);
        this.issueTypes = new issueTypes_1.IssueTypes(this);
        this.issueTypeSchemes = new issueTypeSchemes_1.IssueTypeSchemes(this);
        this.issueTypeScreenSchemes = new issueTypeScreenSchemes_1.IssueTypeScreenSchemes(this);
        this.issueVotes = new issueVotes_1.IssueVotes(this);
        this.issueWatchers = new issueWatchers_1.IssueWatchers(this);
        this.issueWorklogProperties = new issueWorklogProperties_1.IssueWorklogProperties(this);
        this.issueWorklogs = new issueWorklogs_1.IssueWorklogs(this);
        this.jiraExpressions = new jiraExpressions_1.JiraExpressions(this);
        this.jiraSettings = new jiraSettings_1.JiraSettings(this);
        this.jql = new jQL_1.JQL(this);
        this.jqlFunctionsApps = new jqlFunctionsApps_1.JqlFunctionsApps(this);
        this.labels = new labels_1.Labels(this);
        this.licenseMetrics = new licenseMetrics_1.LicenseMetrics(this);
        this.myself = new myself_1.Myself(this);
        this.permissions = new permissions_1.Permissions(this);
        this.permissionSchemes = new permissionSchemes_1.PermissionSchemes(this);
        this.plans = new plans_1.Plans(this);
        this.prioritySchemes = new prioritySchemes_1.PrioritySchemes(this);
        this.projectAvatars = new projectAvatars_1.ProjectAvatars(this);
        this.projectCategories = new projectCategories_1.ProjectCategories(this);
        this.projectClassificationLevels = new projectClassificationLevels_1.ProjectClassificationLevels(this);
        this.projectComponents = new projectComponents_1.ProjectComponents(this);
        this.projectEmail = new projectEmail_1.ProjectEmail(this);
        this.projectFeatures = new projectFeatures_1.ProjectFeatures(this);
        this.projectKeyAndNameValidation = new projectKeyAndNameValidation_1.ProjectKeyAndNameValidation(this);
        this.projectPermissionSchemes = new projectPermissionSchemes_1.ProjectPermissionSchemes(this);
        this.projectProperties = new projectProperties_1.ProjectProperties(this);
        this.projectRoleActors = new projectRoleActors_1.ProjectRoleActors(this);
        this.projectRoles = new projectRoles_1.ProjectRoles(this);
        this.projects = new projects_1.Projects(this);
        this.projectTypes = new projectTypes_1.ProjectTypes(this);
        this.projectVersions = new projectVersions_1.ProjectVersions(this);
        this.screens = new screens_1.Screens(this);
        this.screenSchemes = new screenSchemes_1.ScreenSchemes(this);
        this.screenTabFields = new screenTabFields_1.ScreenTabFields(this);
        this.screenTabs = new screenTabs_1.ScreenTabs(this);
        this.serverInfo = new serverInfo_1.ServerInfo(this);
        this.serviceRegistry = new serviceRegistry_1.ServiceRegistry(this);
        this.status = new status_1.Status(this);
        this.tasks = new tasks_1.Tasks(this);
        this.teamsInPlan = new teamsInPlan_1.TeamsInPlan(this);
        this.timeTracking = new timeTracking_1.TimeTracking(this);
        this.uiModificationsApps = new uIModificationsApps_1.UIModificationsApps(this);
        this.userProperties = new userProperties_1.UserProperties(this);
        this.users = new users_1.Users(this);
        this.userSearch = new userSearch_1.UserSearch(this);
        this.webhooks = new webhooks_1.Webhooks(this);
        this.workflows = new workflows_1.Workflows(this);
        this.workflowSchemeDrafts = new workflowSchemeDrafts_1.WorkflowSchemeDrafts(this);
        this.workflowSchemeProjectAssociations = new workflowSchemeProjectAssociations_1.WorkflowSchemeProjectAssociations(this);
        this.workflowSchemes = new workflowSchemes_1.WorkflowSchemes(this);
        this.workflowStatusCategories = new workflowStatusCategories_1.WorkflowStatusCategories(this);
        this.workflowStatuses = new workflowStatuses_1.WorkflowStatuses(this);
        this.workflowTransitionProperties = new workflowTransitionProperties_1.WorkflowTransitionProperties(this);
        this.workflowTransitionRules = new workflowTransitionRules_1.WorkflowTransitionRules(this);
    }
}
exports.Version2Client = Version2Client;
//# sourceMappingURL=version2Client.js.map