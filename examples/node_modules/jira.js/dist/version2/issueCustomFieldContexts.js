"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssueCustomFieldContexts = void 0;
const tslib_1 = require("tslib");
class IssueCustomFieldContexts {
    constructor(client) {
        this.client = client;
    }
    getContextsForField(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fieldId = typeof parameters === 'string' ? parameters : parameters.fieldId;
            const config = {
                url: `/rest/api/2/field/${fieldId}/context`,
                method: 'GET',
                params: {
                    isAnyIssueType: typeof parameters !== 'string' && parameters.isAnyIssueType,
                    isGlobalContext: typeof parameters !== 'string' && parameters.isGlobalContext,
                    contextId: typeof parameters !== 'string' && parameters.contextId,
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context`,
                method: 'POST',
                data: {
                    id: parameters.id,
                    name: parameters.name,
                    description: parameters.description,
                    projectIds: parameters.projectIds,
                    issueTypeIds: parameters.issueTypeIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getDefaultValues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fieldId = typeof parameters === 'string' ? parameters : parameters.fieldId;
            const config = {
                url: `/rest/api/2/field/${fieldId}/context/defaultValue`,
                method: 'GET',
                params: {
                    contextId: typeof parameters !== 'string' && parameters.contextId,
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setDefaultValues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context/defaultValue`,
                method: 'PUT',
                data: {
                    defaultValues: parameters.defaultValues,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssueTypeMappingsForContexts(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fieldId = typeof parameters === 'string' ? parameters : parameters.fieldId;
            const config = {
                url: `/rest/api/2/field/${fieldId}/context/issuetypemapping`,
                method: 'GET',
                params: {
                    contextId: typeof parameters !== 'string' && parameters.contextId,
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCustomFieldContextsForProjectsAndIssueTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context/mapping`,
                method: 'POST',
                params: {
                    startAt: parameters.startAt,
                    maxResults: parameters.maxResults,
                },
                data: {
                    mappings: parameters.mappings,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectContextMapping(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fieldId = typeof parameters === 'string' ? parameters : parameters.fieldId;
            const config = {
                url: `/rest/api/2/field/${fieldId}/context/projectmapping`,
                method: 'GET',
                params: {
                    contextId: typeof parameters !== 'string' && parameters.contextId,
                    startAt: typeof parameters !== 'string' && parameters.startAt,
                    maxResults: typeof parameters !== 'string' && parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}`,
                method: 'PUT',
                data: {
                    name: parameters.name,
                    description: parameters.description,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addIssueTypesToContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/issuetype`,
                method: 'PUT',
                data: {
                    issueTypeIds: parameters.issueTypeIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeIssueTypesFromContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/issuetype/remove`,
                method: 'POST',
                data: {
                    issueTypeIds: parameters.issueTypeIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    assignProjectsToCustomFieldContext(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/project`,
                method: 'PUT',
                data: {
                    projectIds: parameters.projectIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeCustomFieldContextFromProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/field/${parameters.fieldId}/context/${parameters.contextId}/project/remove`,
                method: 'POST',
                data: {
                    projectIds: parameters.projectIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssueCustomFieldContexts = IssueCustomFieldContexts;
//# sourceMappingURL=issueCustomFieldContexts.js.map