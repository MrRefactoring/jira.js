"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionSchemes = void 0;
const tslib_1 = require("tslib");
class PermissionSchemes {
    constructor(client) {
        this.client = client;
    }
    getAllPermissionSchemes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/permissionscheme',
                method: 'GET',
                params: {
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/permissionscheme',
                method: 'POST',
                params: {
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
                data: Object.assign(Object.assign({}, parameters), { expand: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const schemeId = typeof parameters === 'string' ? parameters : parameters.schemeId;
            const config = {
                url: `/rest/api/2/permissionscheme/${schemeId}`,
                method: 'GET',
                params: {
                    expand: typeof parameters !== 'string' ? parameters.expand : undefined,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updatePermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/permissionscheme/${parameters.schemeId}`,
                method: 'PUT',
                params: {
                    expand: parameters.expand,
                },
                data: Object.assign(Object.assign({}, parameters), { schemeId: undefined, expand: undefined }),
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deletePermissionScheme(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/permissionscheme/${parameters.schemeId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPermissionSchemeGrants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/permissionscheme/${parameters.schemeId}/permission`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createPermissionGrant(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/permissionscheme/${parameters.schemeId}/permission`,
                method: 'POST',
                params: {
                    expand: parameters.expand,
                },
                data: {
                    holder: parameters.holder,
                    id: parameters.id,
                    permission: parameters.permission,
                    self: parameters.self,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPermissionSchemeGrant(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/permissionscheme/${parameters.schemeId}/permission/${parameters.permissionId}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deletePermissionSchemeEntity(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/permissionscheme/${parameters.schemeId}/permission/${parameters.permissionId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.PermissionSchemes = PermissionSchemes;
//# sourceMappingURL=permissionSchemes.js.map