"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuePriorities = void 0;
const tslib_1 = require("tslib");
const paramSerializer_1 = require("../paramSerializer");
class IssuePriorities {
    constructor(client) {
        this.client = client;
    }
    getPriorities(callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/priority',
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/priority',
                method: 'POST',
                data: {
                    avatarId: parameters.avatarId,
                    description: parameters.description,
                    iconUrl: parameters.iconUrl,
                    name: parameters.name,
                    statusColor: parameters.statusColor,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setDefaultPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/priority/default',
                method: 'PUT',
                data: {
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    movePriorities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/priority/move',
                method: 'PUT',
                data: {
                    after: parameters.after,
                    ids: parameters.ids,
                    position: parameters.position,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchPriorities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/priority/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    projectId: (0, paramSerializer_1.paramSerializer)('projectId', parameters === null || parameters === void 0 ? void 0 : parameters.projectId),
                    priorityName: parameters === null || parameters === void 0 ? void 0 : parameters.priorityName,
                    onlyDefault: parameters === null || parameters === void 0 ? void 0 : parameters.onlyDefault,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/priority/${id}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updatePriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/priority/${parameters.id}`,
                method: 'PUT',
                data: {
                    avatarId: parameters.avatarId,
                    description: parameters.description,
                    iconUrl: parameters.iconUrl,
                    name: parameters.name,
                    statusColor: parameters.statusColor,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deletePriority(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/priority/${parameters.id}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.IssuePriorities = IssuePriorities;
//# sourceMappingURL=issuePriorities.js.map