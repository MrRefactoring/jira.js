"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workflows = void 0;
const tslib_1 = require("tslib");
const paramSerializer_1 = require("../paramSerializer");
class Workflows {
    constructor(client) {
        this.client = client;
    }
    createWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflow',
                method: 'POST',
                data: {
                    description: parameters.description,
                    name: parameters.name,
                    statuses: parameters.statuses,
                    transitions: parameters.transitions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkflowsPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflow/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    workflowName: (0, paramSerializer_1.paramSerializer)('workflowName', parameters === null || parameters === void 0 ? void 0 : parameters.workflowName),
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    isActive: parameters === null || parameters === void 0 ? void 0 : parameters.isActive,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteInactiveWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const entityId = typeof parameters === 'string' ? parameters : parameters.entityId;
            const config = {
                url: `/rest/api/2/workflow/${entityId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkflowProjectIssueTypeUsages(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/workflow/${parameters.workflowId}/project/${parameters.projectId}/issueTypeUsages`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectUsagesForWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/workflow/${parameters.workflowId}/projectUsages`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkflowSchemeUsagesForWorkflow(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/workflow/${parameters.workflowId}/workflowSchemes`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    readWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflows',
                method: 'POST',
                params: {
                    useTransitionLinksFormat: parameters.useTransitionLinksFormat,
                    useApprovalConfiguration: parameters.useApprovalConfiguration,
                },
                data: {
                    projectAndIssueTypes: parameters.projectAndIssueTypes,
                    workflowIds: parameters.workflowIds,
                    workflowNames: parameters.workflowNames,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    workflowCapabilities(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflows/capabilities',
                method: 'GET',
                params: {
                    workflowId: parameters.workflowId,
                    projectId: parameters.projectId,
                    issueTypeId: parameters.issueTypeId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflows/create',
                method: 'POST',
                data: {
                    scope: parameters.scope,
                    statuses: parameters.statuses,
                    workflows: parameters.workflows,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    validateCreateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflows/create/validation',
                method: 'POST',
                data: {
                    payload: parameters.payload,
                    validationOptions: parameters.validationOptions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflows/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    queryString: parameters === null || parameters === void 0 ? void 0 : parameters.queryString,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    scope: parameters === null || parameters === void 0 ? void 0 : parameters.scope,
                    isActive: parameters === null || parameters === void 0 ? void 0 : parameters.isActive,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflows/update',
                method: 'POST',
                params: {
                    expand: parameters.expand,
                },
                data: {
                    statuses: parameters.statuses,
                    workflows: parameters.workflows,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    validateUpdateWorkflows(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/workflows/update/validation',
                method: 'POST',
                data: {
                    payload: parameters.payload,
                    validationOptions: parameters.validationOptions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Workflows = Workflows;
//# sourceMappingURL=workflows.js.map