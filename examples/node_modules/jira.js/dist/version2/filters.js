"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filters = void 0;
const tslib_1 = require("tslib");
class Filters {
    constructor(client) {
        this.client = client;
    }
    createFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/filter',
                method: 'POST',
                params: {
                    expand: parameters.expand,
                    overrideSharePermissions: parameters.overrideSharePermissions,
                },
                data: {
                    approximateLastUsed: parameters.approximateLastUsed,
                    description: parameters.description,
                    editPermissions: parameters.editPermissions,
                    favourite: parameters.favourite,
                    favouritedCount: parameters.favouritedCount,
                    id: parameters.id,
                    jql: parameters.jql,
                    name: parameters.name,
                    owner: parameters.owner,
                    searchUrl: parameters.searchUrl,
                    self: parameters.self,
                    sharePermissions: parameters.sharePermissions,
                    sharedUsers: parameters.sharedUsers,
                    subscriptions: parameters.subscriptions,
                    viewUrl: parameters.viewUrl,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getFavouriteFilters(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/filter/favourite',
                method: 'GET',
                params: {
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getMyFilters(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/filter/my',
                method: 'GET',
                params: {
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    includeFavourites: parameters === null || parameters === void 0 ? void 0 : parameters.includeFavourites,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getFiltersPaginated(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/filter/search',
                method: 'GET',
                params: {
                    filterName: parameters === null || parameters === void 0 ? void 0 : parameters.filterName,
                    accountId: parameters === null || parameters === void 0 ? void 0 : parameters.accountId,
                    groupname: parameters === null || parameters === void 0 ? void 0 : parameters.groupname,
                    groupId: parameters === null || parameters === void 0 ? void 0 : parameters.groupId,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    overrideSharePermissions: parameters === null || parameters === void 0 ? void 0 : parameters.overrideSharePermissions,
                    isSubstringMatch: parameters === null || parameters === void 0 ? void 0 : parameters.isSubstringMatch,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/filter/${id}`,
                method: 'GET',
                params: {
                    expand: typeof parameters !== 'string' && parameters.expand,
                    overrideSharePermissions: typeof parameters !== 'string' && parameters.overrideSharePermissions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/filter/${parameters.id}`,
                method: 'PUT',
                params: {
                    expand: parameters.expand,
                    overrideSharePermissions: parameters.overrideSharePermissions,
                },
                data: {
                    name: parameters.name,
                    description: parameters.description,
                    jql: parameters.jql,
                    favourite: parameters.favourite,
                    sharePermissions: parameters.sharePermissions,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/filter/${id}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/filter/${id}/columns`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/filter/${parameters.id}/columns`,
                method: 'PUT',
                data: parameters.columns,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    resetColumns(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/filter/${id}/columns`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setFavouriteForFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/filter/${id}/favourite`,
                method: 'PUT',
                params: {
                    expand: typeof parameters !== 'string' && parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteFavouriteForFilter(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/filter/${id}/favourite`,
                method: 'DELETE',
                params: {
                    expand: typeof parameters !== 'string' && parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    changeFilterOwner(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/filter/${parameters.id}/owner`,
                method: 'PUT',
                data: {
                    accountId: parameters.accountId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Filters = Filters;
//# sourceMappingURL=filters.js.map