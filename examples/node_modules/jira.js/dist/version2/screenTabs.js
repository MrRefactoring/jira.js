"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenTabs = void 0;
const tslib_1 = require("tslib");
class ScreenTabs {
    constructor(client) {
        this.client = client;
    }
    getBulkScreenTabs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/screens/tabs',
                method: 'GET',
                params: {
                    screenId: parameters === null || parameters === void 0 ? void 0 : parameters.screenId,
                    tabId: parameters === null || parameters === void 0 ? void 0 : parameters.tabId,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResult: parameters === null || parameters === void 0 ? void 0 : parameters.maxResult,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAllScreenTabs(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const screenId = typeof parameters === 'string' ? parameters : parameters.screenId;
            const config = {
                url: `/rest/api/2/screens/${screenId}/tabs`,
                method: 'GET',
                params: {
                    projectKey: typeof parameters !== 'string' && parameters.projectKey,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/screens/${parameters.screenId}/tabs`,
                method: 'POST',
                data: {
                    id: parameters.id,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    renameScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}`,
                method: 'PUT',
                data: {
                    id: parameters.id,
                    name: parameters.name,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    moveScreenTab(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/screens/${parameters.screenId}/tabs/${parameters.tabId}/move/${parameters.pos}`,
                method: 'POST',
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ScreenTabs = ScreenTabs;
//# sourceMappingURL=screenTabs.js.map