"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Status = void 0;
const tslib_1 = require("tslib");
class Status {
    constructor(client) {
        this.client = client;
    }
    getStatusesById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: '/rest/api/2/statuses',
                method: 'GET',
                params: {
                    id,
                    expand: typeof parameters !== 'string' && parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/statuses',
                method: 'POST',
                data: {
                    statuses: parameters.statuses,
                    scope: parameters.scope,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/statuses',
                method: 'PUT',
                data: {
                    statuses: parameters.statuses,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteStatusesById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: '/rest/api/2/statuses',
                method: 'DELETE',
                params: {
                    id,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    search(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/statuses/search',
                method: 'GET',
                params: {
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    projectId: parameters === null || parameters === void 0 ? void 0 : parameters.projectId,
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    searchString: parameters === null || parameters === void 0 ? void 0 : parameters.searchString,
                    statusCategory: parameters === null || parameters === void 0 ? void 0 : parameters.statusCategory,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectIssueTypeUsagesForStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/statuses/${parameters.statusId}/project/${parameters.projectId}/issueTypeUsages`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectUsagesForStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/statuses/${parameters.statusId}/projectUsages`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getWorkflowUsagesForStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/statuses/${parameters.statusId}/workflowUsages`,
                method: 'GET',
                params: {
                    nextPageToken: parameters.nextPageToken,
                    maxResults: parameters.maxResults,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Status = Status;
//# sourceMappingURL=status.js.map