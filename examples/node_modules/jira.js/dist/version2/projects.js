"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Projects = void 0;
const tslib_1 = require("tslib");
class Projects {
    constructor(client) {
        this.client = client;
    }
    createProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/project',
                method: 'POST',
                data: {
                    assigneeType: parameters.assigneeType,
                    avatarId: parameters.avatarId,
                    categoryId: parameters.categoryId,
                    description: parameters.description,
                    fieldConfigurationScheme: parameters.fieldConfigurationScheme,
                    issueSecurityScheme: parameters.issueSecurityScheme,
                    issueTypeScheme: parameters.issueTypeScheme,
                    issueTypeScreenScheme: parameters.issueTypeScreenScheme,
                    key: parameters.key,
                    leadAccountId: parameters.leadAccountId,
                    name: parameters.name,
                    notificationScheme: parameters.notificationScheme,
                    permissionScheme: parameters.permissionScheme,
                    projectTemplateKey: parameters.projectTemplateKey,
                    projectTypeKey: parameters.projectTypeKey,
                    url: parameters.url,
                    workflowScheme: parameters.workflowScheme,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRecent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/project/recent',
                method: 'GET',
                params: {
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    searchProjects(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/api/2/project/search',
                method: 'GET',
                params: {
                    startAt: parameters === null || parameters === void 0 ? void 0 : parameters.startAt,
                    maxResults: parameters === null || parameters === void 0 ? void 0 : parameters.maxResults,
                    orderBy: parameters === null || parameters === void 0 ? void 0 : parameters.orderBy,
                    id: parameters === null || parameters === void 0 ? void 0 : parameters.id,
                    keys: parameters === null || parameters === void 0 ? void 0 : parameters.keys,
                    query: parameters === null || parameters === void 0 ? void 0 : parameters.query,
                    typeKey: parameters === null || parameters === void 0 ? void 0 : parameters.typeKey,
                    categoryId: parameters === null || parameters === void 0 ? void 0 : parameters.categoryId,
                    action: parameters === null || parameters === void 0 ? void 0 : parameters.action,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    status: parameters === null || parameters === void 0 ? void 0 : parameters.status,
                    properties: parameters === null || parameters === void 0 ? void 0 : parameters.properties,
                    propertyQuery: parameters === null || parameters === void 0 ? void 0 : parameters.propertyQuery,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/2/project/${projectIdOrKey}`,
                method: 'GET',
                params: {
                    expand: typeof parameters !== 'string' ? parameters.expand : undefined,
                    properties: typeof parameters !== 'string' ? parameters.properties : undefined,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    updateProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/project/${parameters.projectIdOrKey}`,
                method: 'PUT',
                params: {
                    expand: parameters.expand,
                },
                data: {
                    assigneeType: parameters.assigneeType,
                    avatarId: parameters.avatarId,
                    categoryId: parameters.categoryId,
                    description: parameters.description,
                    issueSecurityScheme: parameters.issueSecurityScheme,
                    key: parameters.key,
                    leadAccountId: parameters.leadAccountId,
                    name: parameters.name,
                    notificationScheme: parameters.notificationScheme,
                    permissionScheme: parameters.permissionScheme,
                    projectTemplateKey: parameters.projectTemplateKey,
                    projectTypeKey: parameters.projectTypeKey,
                    releasedProjectKeys: parameters.releasedProjectKeys,
                    url: parameters.url,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/2/project/${projectIdOrKey}`,
                method: 'DELETE',
                params: {
                    enableUndo: typeof parameters !== 'string' ? parameters.enableUndo : undefined,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    archiveProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/2/project/${projectIdOrKey}/archive`,
                method: 'POST',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteProjectAsynchronously(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/2/project/${projectIdOrKey}/delete`,
                method: 'POST',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    restore(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/2/project/${projectIdOrKey}/restore`,
                method: 'POST',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAllStatuses(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectIdOrKey = typeof parameters === 'string' ? parameters : parameters.projectIdOrKey;
            const config = {
                url: `/rest/api/2/project/${projectIdOrKey}/statuses`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getHierarchy(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectId = typeof parameters === 'string' ? parameters : parameters.projectId;
            const config = {
                url: `/rest/api/2/project/${projectId}/hierarchy`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getNotificationSchemeForProject(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const projectKeyOrId = typeof parameters === 'string' ? parameters : parameters.projectKeyOrId;
            const config = {
                url: `/rest/api/2/project/${projectKeyOrId}/notificationscheme`,
                method: 'GET',
                params: {
                    expand: typeof parameters !== 'string' ? parameters.expand : undefined,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Projects = Projects;
//# sourceMappingURL=projects.js.map