"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Avatars = void 0;
const tslib_1 = require("tslib");
class Avatars {
    constructor(client) {
        this.client = client;
    }
    getAllSystemAvatars(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const type = typeof parameters === 'string' ? parameters : parameters.type;
            const config = {
                url: `/rest/api/2/avatar/${type}/system`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAvatars(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/universal_avatar/type/${parameters.type}/owner/${parameters.entityId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    storeAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const config = {
                url: `/rest/api/2/universal_avatar/type/${parameters.type}/owner/${parameters.entityId}`,
                method: 'POST',
                headers: {
                    'X-Atlassian-Token': 'no-check',
                    'Content-Type': parameters.mimeType,
                },
                params: {
                    x: parameters.x,
                    y: parameters.y,
                    size: (_a = parameters.size) !== null && _a !== void 0 ? _a : 0,
                },
                data: parameters.avatar,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteAvatar(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/universal_avatar/type/${parameters.type}/owner/${parameters.owningObjectId}/avatar/${parameters.id}`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAvatarImageByType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const type = typeof parameters === 'string' ? parameters : parameters.type;
            const config = {
                url: `/rest/api/2/universal_avatar/view/type/${type}`,
                method: 'GET',
                responseType: 'arraybuffer',
                params: {
                    size: typeof parameters !== 'string' ? parameters.size : undefined,
                    format: typeof parameters !== 'string' ? parameters.format : undefined,
                },
            };
            const { data: avatar, headers: { 'content-type': contentTypeWithEncoding }, } = yield this.client.sendRequestFullResponse(config);
            const contentType = contentTypeWithEncoding.split(';')[0].trim();
            return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
    }
    getAvatarImageByID(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/universal_avatar/view/type/${parameters.type}/avatar/${parameters.id}`,
                method: 'GET',
                responseType: 'arraybuffer',
                params: {
                    size: parameters.size,
                    format: parameters.format,
                },
            };
            const { data: avatar, headers: { 'content-type': contentTypeWithEncoding }, } = yield this.client.sendRequestFullResponse(config);
            const contentType = contentTypeWithEncoding.split(';')[0].trim();
            return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
    }
    getAvatarImageByOwner(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/universal_avatar/view/type/${parameters.type}/owner/${parameters.entityId}`,
                method: 'GET',
                responseType: 'arraybuffer',
                params: {
                    size: parameters.size,
                    format: parameters.format,
                },
            };
            const { data: avatar, headers: { 'content-type': contentTypeWithEncoding }, } = yield this.client.sendRequestFullResponse(config);
            const contentType = contentTypeWithEncoding.split(';')[0].trim();
            return this.client.handleSuccessResponse({ contentType, avatar }, callback);
        });
    }
}
exports.Avatars = Avatars;
//# sourceMappingURL=avatars.js.map