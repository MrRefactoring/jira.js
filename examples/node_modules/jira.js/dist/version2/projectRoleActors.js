"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectRoleActors = void 0;
const tslib_1 = require("tslib");
class ProjectRoleActors {
    constructor(client) {
        this.client = client;
    }
    addActorUsers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
                method: 'POST',
                data: {
                    user: parameters.user,
                    group: parameters.group,
                    groupId: parameters.groupId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setActors(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
                method: 'PUT',
                data: {
                    categorisedActors: parameters.categorisedActors,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteActor(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/project/${parameters.projectIdOrKey}/role/${parameters.id}`,
                method: 'DELETE',
                params: {
                    user: parameters.user,
                    group: parameters.group,
                    groupId: parameters.groupId,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProjectRoleActorsForRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const id = typeof parameters === 'string' ? parameters : parameters.id;
            const config = {
                url: `/rest/api/2/role/${id}/actors`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addProjectRoleActorsToRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/role/${parameters.id}/actors`,
                method: 'POST',
                data: {
                    user: parameters.user,
                    groupId: parameters.groupId,
                    group: parameters.group,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteProjectRoleActorsFromRole(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/api/2/role/${parameters.id}/actors`,
                method: 'DELETE',
                params: {
                    user: parameters.user,
                    groupId: parameters.groupId,
                    group: parameters.group,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.ProjectRoleActors = ProjectRoleActors;
//# sourceMappingURL=projectRoleActors.js.map