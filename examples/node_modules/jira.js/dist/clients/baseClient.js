"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const authenticationService_1 = require("../services/authenticationService");
const httpException_1 = require("./httpException");
const STRICT_GDPR_FLAG = 'x-atlassian-force-account-id';
const ATLASSIAN_TOKEN_CHECK_FLAG = 'X-Atlassian-Token';
const ATLASSIAN_TOKEN_CHECK_NOCHECK_VALUE = 'no-check';
class BaseClient {
    constructor(config) {
        var _a;
        this.config = config;
        try {
            new URL(config.host);
        }
        catch (_b) {
            throw new Error('Couldn\'t parse the host URL. Perhaps you forgot to add \'http://\' or \'https://\' at the beginning of the URL?');
        }
        this.instance = axios_1.default.create(Object.assign(Object.assign({ paramsSerializer: this.paramSerializer.bind(this) }, config.baseRequestConfig), { baseURL: config.host, headers: this.removeUndefinedProperties(Object.assign({ [STRICT_GDPR_FLAG]: config.strictGDPR, [ATLASSIAN_TOKEN_CHECK_FLAG]: config.noCheckAtlassianToken ? ATLASSIAN_TOKEN_CHECK_NOCHECK_VALUE : undefined }, (_a = config.baseRequestConfig) === null || _a === void 0 ? void 0 : _a.headers)) }));
    }
    paramSerializer(parameters) {
        const parts = [];
        Object.entries(parameters).forEach(([key, value]) => {
            if (value === null || typeof value === 'undefined') {
                return;
            }
            if (Array.isArray(value)) {
                value = value.join(',');
            }
            if (value instanceof Date) {
                value = value.toISOString();
            }
            else if (value !== null && typeof value === 'object') {
                value = JSON.stringify(value);
            }
            else if (value instanceof Function) {
                const part = value();
                return part && parts.push(part);
            }
            parts.push(`${this.encode(key)}=${this.encode(value)}`);
        });
        return parts.join('&');
    }
    encode(value) {
        return encodeURIComponent(value)
            .replace(/%3A/gi, ':')
            .replace(/%24/g, '$')
            .replace(/%2C/gi, ',')
            .replace(/%20/g, '+')
            .replace(/%5B/gi, '[')
            .replace(/%5D/gi, ']');
    }
    removeUndefinedProperties(obj) {
        return Object.entries(obj)
            .filter(([, value]) => typeof value !== 'undefined')
            .reduce((accumulator, [key, value]) => (Object.assign(Object.assign({}, accumulator), { [key]: value })), {});
    }
    sendRequest(requestConfig, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.sendRequestFullResponse(requestConfig);
                return this.handleSuccessResponse(response.data, callback);
            }
            catch (e) {
                return this.handleFailedResponse(e, callback);
            }
        });
    }
    sendRequestFullResponse(requestConfig) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const modifiedRequestConfig = Object.assign(Object.assign({}, requestConfig), { headers: this.removeUndefinedProperties(Object.assign({ Authorization: yield (0, authenticationService_1.getAuthenticationToken)(this.config.authentication) }, requestConfig.headers)) });
            return this.instance.request(modifiedRequestConfig);
        });
    }
    handleSuccessResponse(response, callback) {
        var _a, _b;
        const callbackResponseHandler = callback && ((data) => callback(null, data));
        const defaultResponseHandler = (data) => data;
        const responseHandler = callbackResponseHandler !== null && callbackResponseHandler !== void 0 ? callbackResponseHandler : defaultResponseHandler;
        (_b = (_a = this.config.middlewares) === null || _a === void 0 ? void 0 : _a.onResponse) === null || _b === void 0 ? void 0 : _b.call(_a, response.data);
        return responseHandler(response);
    }
    handleFailedResponse(e, callback) {
        var _a, _b;
        const err = this.buildErrorHandlingResponse(e);
        const callbackErrorHandler = callback && ((error) => callback(error));
        const defaultErrorHandler = (error) => {
            throw error;
        };
        const errorHandler = callbackErrorHandler !== null && callbackErrorHandler !== void 0 ? callbackErrorHandler : defaultErrorHandler;
        (_b = (_a = this.config.middlewares) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, err);
        return errorHandler(err);
    }
    buildErrorHandlingResponse(e) {
        if (axios_1.default.isAxiosError(e) && e.response) {
            return new httpException_1.HttpException({
                code: e.code,
                message: e.message,
                data: e.response.data,
                status: e.response.status,
                statusText: e.response.statusText,
            }, e.response.status, { cause: e });
        }
        if (axios_1.default.isAxiosError(e)) {
            return e;
        }
        if ((0, httpException_1.isObject)(e) && (0, httpException_1.isObject)(e.response)) {
            return new httpException_1.HttpException(e.response);
        }
        if (e instanceof Error) {
            return new httpException_1.HttpException(e);
        }
        return new httpException_1.HttpException('Unknown error occurred.', 500, { cause: e });
    }
}
exports.BaseClient = BaseClient;
//# sourceMappingURL=baseClient.js.map