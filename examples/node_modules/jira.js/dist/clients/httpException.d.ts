export declare const isUndefined: (obj: any) => obj is undefined;
export declare const isNil: (val: any) => val is null | undefined;
export declare const isObject: (fn: any) => fn is object;
export declare const isString: (val: any) => val is string;
export declare const isNumber: (val: any) => val is number;
export interface HttpExceptionOptions {
    /** Original cause of the error */
    cause?: unknown;
    description?: string;
}
export declare const DEFAULT_EXCEPTION_STATUS = 500;
export declare const DEFAULT_EXCEPTION_MESSAGE = "Something went wrong";
export declare const DEFAULT_EXCEPTION_CODE = "INTERNAL_SERVER_ERROR";
export declare const DEFAULT_EXCEPTION_STATUS_TEXT = "Internal server error";
/** Defines the base HTTP exception, which is handled by the default Exceptions Handler. */
export declare class HttpException extends Error {
    readonly response: string | Record<string, any>;
    /**
     * Instantiate a plain HTTP Exception.
     *
     * @example
     *   throw new HttpException('message', HttpStatus.BAD_REQUEST);
     *   throw new HttpException('custom message', HttpStatus.BAD_REQUEST, {
     *     cause: new Error('Cause Error'),
     *   });
     *
     * @param response String, object describing the error condition or the error cause.
     * @param status HTTP response status code.
     * @param options An object used to add an error cause. Configures error chaining support
     * @usageNotes
     * The constructor arguments define the response and the HTTP response status code.
     * - The `response` argument (required) defines the JSON response body. alternatively, it can also be
     *  an error object that is used to define an error [cause](https://nodejs.org/en/blog/release/v16.9.0/#error-cause).
     * - The `status` argument (optional) defines the HTTP Status Code.
     * - The `options` argument (optional) defines additional error options. Currently, it supports the `cause` attribute,
     *  and can be used as an alternative way to specify the error cause: `const error = new HttpException('description', 400, { cause: new Error() });`
     *
     * By default, the JSON response body contains two properties:
     * - `statusCode`: the Http Status Code.
     * - `message`: a short description of the HTTP error by default; override this
     * by supplying a string in the `response` parameter.
     *
     * The `status` argument is required, and should be a valid HTTP status code.
     * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.
     * @see https://nodejs.org/en/blog/release/v16.9.0/#error-cause
     * @see https://github.com/microsoft/TypeScript/issues/45167
     */
    constructor(response: string | Record<string, any>, status?: number, options?: HttpExceptionOptions);
    readonly cause?: unknown;
    readonly code?: string;
    readonly status: number;
    readonly statusText?: string;
    protected initMessage(response: string | Record<string, any>): any;
    protected initCause(response: string | Record<string, any>, options?: HttpExceptionOptions): unknown;
    protected initCode(response: string | Record<string, any>): string;
    protected initName(): string;
    protected initStatus(response: string | Record<string, any>, status?: number): number;
    protected initStatusText(response: string | Record<string, any>, status?: number): string | undefined;
}
