"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpException = exports.DEFAULT_EXCEPTION_STATUS_TEXT = exports.DEFAULT_EXCEPTION_CODE = exports.DEFAULT_EXCEPTION_MESSAGE = exports.DEFAULT_EXCEPTION_STATUS = exports.isNumber = exports.isString = exports.isObject = exports.isNil = exports.isUndefined = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const isUndefined = (obj) => typeof obj === 'undefined';
exports.isUndefined = isUndefined;
const isNil = (val) => (0, exports.isUndefined)(val) || val === null;
exports.isNil = isNil;
const isObject = (fn) => !(0, exports.isNil)(fn) && typeof fn === 'object';
exports.isObject = isObject;
const isString = (val) => typeof val === 'string';
exports.isString = isString;
const isNumber = (val) => typeof val === 'number';
exports.isNumber = isNumber;
exports.DEFAULT_EXCEPTION_STATUS = 500;
exports.DEFAULT_EXCEPTION_MESSAGE = 'Something went wrong';
exports.DEFAULT_EXCEPTION_CODE = 'INTERNAL_SERVER_ERROR';
exports.DEFAULT_EXCEPTION_STATUS_TEXT = 'Internal server error';
/** Defines the base HTTP exception, which is handled by the default Exceptions Handler. */
class HttpException extends Error {
    /**
     * Instantiate a plain HTTP Exception.
     *
     * @example
     *   throw new HttpException('message', HttpStatus.BAD_REQUEST);
     *   throw new HttpException('custom message', HttpStatus.BAD_REQUEST, {
     *     cause: new Error('Cause Error'),
     *   });
     *
     * @param response String, object describing the error condition or the error cause.
     * @param status HTTP response status code.
     * @param options An object used to add an error cause. Configures error chaining support
     * @usageNotes
     * The constructor arguments define the response and the HTTP response status code.
     * - The `response` argument (required) defines the JSON response body. alternatively, it can also be
     *  an error object that is used to define an error [cause](https://nodejs.org/en/blog/release/v16.9.0/#error-cause).
     * - The `status` argument (optional) defines the HTTP Status Code.
     * - The `options` argument (optional) defines additional error options. Currently, it supports the `cause` attribute,
     *  and can be used as an alternative way to specify the error cause: `const error = new HttpException('description', 400, { cause: new Error() });`
     *
     * By default, the JSON response body contains two properties:
     * - `statusCode`: the Http Status Code.
     * - `message`: a short description of the HTTP error by default; override this
     * by supplying a string in the `response` parameter.
     *
     * The `status` argument is required, and should be a valid HTTP status code.
     * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.
     * @see https://nodejs.org/en/blog/release/v16.9.0/#error-cause
     * @see https://github.com/microsoft/TypeScript/issues/45167
     */
    constructor(response, status, options) {
        super();
        this.response = response;
        this.name = this.initName();
        this.cause = this.initCause(response, options);
        this.code = this.initCode(response);
        this.message = this.initMessage(response);
        this.status = this.initStatus(response, status);
        this.statusText = this.initStatusText(response, this.status);
    }
    initMessage(response) {
        var _a, _b;
        if ((0, exports.isString)(response)) {
            return response;
        }
        if ((0, exports.isObject)(response) && (0, exports.isString)(response.message)) {
            return response.message;
        }
        if (this.constructor) {
            return (_b = (_a = this.constructor.name.match(/[A-Z][a-z]+|[0-9]+/g)) === null || _a === void 0 ? void 0 : _a.join(' ')) !== null && _b !== void 0 ? _b : 'Error';
        }
        return exports.DEFAULT_EXCEPTION_MESSAGE;
    }
    initCause(response, options) {
        if (options === null || options === void 0 ? void 0 : options.cause) {
            return options.cause;
        }
        if ((0, exports.isObject)(response) && (0, exports.isObject)(response.cause)) {
            return response.cause;
        }
        return undefined;
    }
    initCode(response) {
        if ((0, exports.isObject)(response) && (0, exports.isString)(response.code)) {
            return response.code;
        }
        return exports.DEFAULT_EXCEPTION_CODE;
    }
    initName() {
        return this.constructor.name;
    }
    initStatus(response, status) {
        if (status) {
            return status;
        }
        if ((0, exports.isObject)(response) && (0, exports.isNumber)(response.status)) {
            return response.status;
        }
        if ((0, exports.isObject)(response) && (0, exports.isNumber)(response.statusCode)) {
            return response.statusCode;
        }
        return exports.DEFAULT_EXCEPTION_STATUS;
    }
    initStatusText(response, status) {
        if ((0, exports.isObject)(response) && (0, exports.isString)(response.statusText)) {
            return response.statusText;
        }
        return status ? undefined : exports.DEFAULT_EXCEPTION_STATUS_TEXT;
    }
}
exports.HttpException = HttpException;
//# sourceMappingURL=httpException.js.map