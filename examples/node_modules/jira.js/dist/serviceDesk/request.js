"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
const tslib_1 = require("tslib");
class Request {
    constructor(client) {
        this.client = client;
    }
    getCustomerRequests(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/servicedeskapi/request',
                method: 'GET',
                params: {
                    searchTerm: parameters === null || parameters === void 0 ? void 0 : parameters.searchTerm,
                    requestStatus: parameters === null || parameters === void 0 ? void 0 : parameters.requestStatus,
                    approvalStatus: parameters === null || parameters === void 0 ? void 0 : parameters.approvalStatus,
                    organizationId: parameters === null || parameters === void 0 ? void 0 : parameters.organizationId,
                    serviceDeskId: parameters === null || parameters === void 0 ? void 0 : parameters.serviceDeskId,
                    requestTypeId: parameters === null || parameters === void 0 ? void 0 : parameters.requestTypeId,
                    expand: parameters === null || parameters === void 0 ? void 0 : parameters.expand,
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createCustomerRequest(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/servicedeskapi/request',
                method: 'POST',
                data: {
                    serviceDeskId: parameters === null || parameters === void 0 ? void 0 : parameters.serviceDeskId,
                    requestTypeId: parameters === null || parameters === void 0 ? void 0 : parameters.requestTypeId,
                    requestFieldValues: parameters === null || parameters === void 0 ? void 0 : parameters.requestFieldValues,
                    requestParticipants: parameters === null || parameters === void 0 ? void 0 : parameters.requestParticipants,
                    raiseOnBehalfOf: parameters === null || parameters === void 0 ? void 0 : parameters.raiseOnBehalfOf,
                    channel: parameters === null || parameters === void 0 ? void 0 : parameters.channel,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCustomerRequestByIdOrKey(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getApprovals(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/approval`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getApprovalById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/approval/${parameters.approvalId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    answerApproval(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/approval/${parameters.approvalId}`,
                method: 'POST',
                data: {
                    decision: parameters.decision,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAttachmentsForRequest(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/attachment`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createAttachment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/attachment`,
                method: 'POST',
                data: {
                    temporaryAttachmentIds: parameters.temporaryAttachmentIds,
                    additionalComment: parameters.additionalComment,
                    public: parameters.public,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAttachmentContent(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/attachment/${parameters.attachmentId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getAttachmentThumbnail(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/attachment/${parameters.attachmentId}/thumbnail`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestComments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/comment`,
                method: 'GET',
                params: {
                    public: parameters.public,
                    internal: parameters.internal,
                    expand: parameters.expand,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createRequestComment(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/comment`,
                method: 'POST',
                data: {
                    body: parameters.body,
                    public: parameters.public,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestCommentById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/comment/${parameters.commentId}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCommentAttachments(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/comment/${parameters.commentId}/attachment`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSubscriptionStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/notification`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    subscribe(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/notification`,
                method: 'PUT',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    unsubscribe(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/notification`,
                method: 'DELETE',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestParticipants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/participant`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addRequestParticipants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/participant`,
                method: 'POST',
                data: {
                    usernames: parameters.usernames,
                    accountIds: parameters.accountIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeRequestParticipants(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/participant`,
                method: 'DELETE',
                data: {
                    usernames: parameters.usernames,
                    accountIds: parameters.accountIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSlaInformation(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/sla`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getSlaInformationById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/sla/${parameters.slaMetricId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCustomerRequestStatus(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/status`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCustomerTransitions(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/transition`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    performCustomerTransition(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.issueIdOrKey}/transition`,
                method: 'POST',
                data: {
                    id: parameters.id,
                    additionalComment: parameters.additionalComment,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getFeedback(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.requestIdOrKey}/feedback`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    postFeedback(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.requestIdOrKey}/feedback`,
                method: 'POST',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                data: {
                    type: parameters.type,
                    rating: parameters.rating,
                    comment: parameters.comment,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteFeedback(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/request/${parameters.requestIdOrKey}/feedback`,
                method: 'DELETE',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
}
exports.Request = Request;
//# sourceMappingURL=request.js.map