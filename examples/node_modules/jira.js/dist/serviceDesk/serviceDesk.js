"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceDesk = void 0;
const tslib_1 = require("tslib");
const formdata_node_1 = require("formdata-node");
class ServiceDesk {
    constructor(client) {
        this.client = client;
    }
    getServiceDesks(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: '/rest/servicedeskapi/servicedesk',
                method: 'GET',
                params: {
                    start: parameters === null || parameters === void 0 ? void 0 : parameters.start,
                    limit: parameters === null || parameters === void 0 ? void 0 : parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getServiceDeskById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}`,
                method: 'GET',
            };
            return this.client.sendRequest(config, callback);
        });
    }
    attachTemporaryFile(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, e_1, _b, _c;
            const formData = new formdata_node_1.FormData();
            const attachments = Array.isArray(parameters.attachment) ? parameters.attachment : [parameters.attachment];
            const { default: mime } = yield import('mime');
            // eslint-disable-next-line @typescript-eslint/consistent-type-imports
            let Readable;
            if (typeof window === 'undefined') {
                const { Readable: NodeReadable } = yield import('stream');
                Readable = NodeReadable;
            }
            try {
                for (var _d = true, attachments_1 = tslib_1.__asyncValues(attachments), attachments_1_1; attachments_1_1 = yield attachments_1.next(), _a = attachments_1_1.done, !_a; _d = true) {
                    _c = attachments_1_1.value;
                    _d = false;
                    const attachment = _c;
                    const file = yield this._convertToFile(attachment, mime, Readable);
                    if (!(file instanceof formdata_node_1.File || file instanceof Blob)) {
                        throw new Error(`Unsupported file type for attachment: ${typeof file}`);
                    }
                    formData.append('file', file, attachment.filename);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = attachments_1.return)) yield _b.call(attachments_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/attachTemporaryFile`,
                method: 'POST',
                headers: {
                    'X-Atlassian-Token': 'no-check',
                    'Content-Type': 'multipart/form-data',
                },
                data: formData,
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                params: {
                    query: parameters.query,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    addCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
                method: 'POST',
                data: {
                    usernames: parameters.usernames,
                    accountIds: parameters.accountIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    removeCustomers(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/customer`,
                method: 'DELETE',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                data: {
                    usernames: parameters.usernames,
                    accountIds: parameters.accountIds,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getArticles(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/knowledgebase/article`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                params: {
                    query: parameters.query,
                    highlight: parameters.highlight,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getQueues(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue`,
                method: 'GET',
                params: {
                    includeCount: parameters.includeCount,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getQueue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue/${parameters.queueId}`,
                method: 'GET',
                params: {
                    includeCount: parameters.includeCount,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getIssuesInQueue(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/queue/${parameters.queueId}/issue`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestTypes(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype`,
                method: 'GET',
                params: {
                    groupId: parameters.groupId,
                    expand: parameters.expand,
                    searchQuery: parameters.searchQuery,
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    createRequestType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype`,
                method: 'POST',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
                data: {
                    issueTypeId: parameters.issueTypeId,
                    name: parameters.name,
                    description: parameters.description,
                    helpText: parameters.helpText,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestTypeById(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteRequestType(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}`,
                method: 'DELETE',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestTypeFields(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/field`,
                method: 'GET',
                params: {
                    expand: parameters.expand,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getPropertiesKeys(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
                method: 'GET',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    setProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
                method: 'PUT',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    deleteProperty(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttype/${parameters.requestTypeId}/property/${parameters.propertyKey}`,
                method: 'DELETE',
                headers: {
                    'X-ExperimentalApi': 'opt-in',
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    getRequestTypeGroups(parameters, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = {
                url: `/rest/servicedeskapi/servicedesk/${parameters.serviceDeskId}/requesttypegroup`,
                method: 'GET',
                params: {
                    start: parameters.start,
                    limit: parameters.limit,
                },
            };
            return this.client.sendRequest(config, callback);
        });
    }
    _convertToFile(attachment, mime, 
    // eslint-disable-next-line @typescript-eslint/consistent-type-imports
    Readable) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const mimeType = (_a = attachment.mimeType) !== null && _a !== void 0 ? _a : (mime.getType(attachment.filename) || undefined);
            if (attachment.file instanceof Blob || attachment.file instanceof formdata_node_1.File) {
                return attachment.file;
            }
            if (typeof attachment.file === 'string') {
                return new formdata_node_1.File([attachment.file], attachment.filename, { type: mimeType });
            }
            if (Readable && attachment.file instanceof Readable) {
                return this._streamToBlob(attachment.file, attachment.filename, mimeType);
            }
            if (attachment.file instanceof ReadableStream) {
                return this._streamToBlob(attachment.file, attachment.filename, mimeType);
            }
            if (ArrayBuffer.isView(attachment.file) || attachment.file instanceof ArrayBuffer) {
                return new formdata_node_1.File([attachment.file], attachment.filename, { type: mimeType });
            }
            throw new Error('Unsupported attachment file type.');
        });
    }
    _streamToBlob(
    // eslint-disable-next-line @typescript-eslint/consistent-type-imports
    stream, filename, mimeType) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (typeof window === 'undefined' && stream instanceof (yield import('stream')).Readable) {
                return new Promise((resolve, reject) => {
                    const chunks = [];
                    stream.on('data', chunk => chunks.push(chunk));
                    stream.on('end', () => {
                        const blob = new Blob(chunks, { type: mimeType });
                        resolve(new formdata_node_1.File([blob], filename, { type: mimeType }));
                    });
                    stream.on('error', reject);
                });
            }
            if (stream instanceof ReadableStream) {
                const reader = stream.getReader();
                const chunks = [];
                let done = false;
                while (!done) {
                    const { value, done: streamDone } = yield reader.read();
                    if (value)
                        chunks.push(value);
                    done = streamDone;
                }
                const blob = new Blob(chunks, { type: mimeType });
                return new formdata_node_1.File([blob], filename, { type: mimeType });
            }
            throw new Error('Unsupported stream type.');
        });
    }
}
exports.ServiceDesk = ServiceDesk;
//# sourceMappingURL=serviceDesk.js.map