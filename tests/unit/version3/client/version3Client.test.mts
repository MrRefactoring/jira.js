import { describe, it, expect } from 'vitest';
import { Version3Client } from '@/version3/index.mjs';
import { AnnouncementBanner } from '@/version3/announcementBanner.mjs';
import { AppMigration } from '@/version3/appMigration.mjs';
import { AppProperties } from '@/version3/appProperties.mjs';
import { ApplicationRoles } from '@/version3/applicationRoles.mjs';
import { AuditRecords } from '@/version3/auditRecords.mjs';
import { Avatars } from '@/version3/avatars.mjs';
import { Dashboards } from '@/version3/dashboards.mjs';
import { DynamicModules } from '@/version3/dynamicModules.mjs';
import { FilterSharing } from '@/version3/filterSharing.mjs';
import { Filters } from '@/version3/filters.mjs';
import { GroupAndUserPicker } from '@/version3/groupAndUserPicker.mjs';
import { Groups } from '@/version3/groups.mjs';
import { InstanceInformation } from '@/version3/instanceInformation.mjs';
import { IssueAttachments } from '@/version3/issueAttachments.mjs';
import { IssueCommentProperties } from '@/version3/issueCommentProperties.mjs';
import { IssueComments } from '@/version3/issueComments.mjs';
import { IssueCustomFieldConfigurationApps } from '@/version3/issueCustomFieldConfigurationApps.mjs';
import { IssueCustomFieldContexts } from '@/version3/issueCustomFieldContexts.mjs';
import { IssueCustomFieldOptions } from '@/version3/issueCustomFieldOptions.mjs';
import { IssueCustomFieldOptionsApps } from '@/version3/issueCustomFieldOptionsApps.mjs';
import { IssueCustomFieldValuesApps } from '@/version3/issueCustomFieldValuesApps.mjs';
import { IssueFieldConfigurations } from '@/version3/issueFieldConfigurations.mjs';
import { IssueFields } from '@/version3/issueFields.mjs';
import { IssueLinks } from '@/version3/issueLinks.mjs';
import { IssueLinkTypes } from '@/version3/issueLinkTypes.mjs';
import { IssueNavigatorSettings } from '@/version3/issueNavigatorSettings.mjs';
import { IssueNotificationSchemes } from '@/version3/issueNotificationSchemes.mjs';
import { IssuePriorities } from '@/version3/issuePriorities.mjs';
import { IssueProperties } from '@/version3/issueProperties.mjs';
import { IssueRemoteLinks } from '@/version3/issueRemoteLinks.mjs';
import { IssueResolutions } from '@/version3/issueResolutions.mjs';
import { Issues } from '@/version3/issues.mjs';
import { IssueSearch } from '@/version3/issueSearch.mjs';
import { IssueSecurityLevel } from '@/version3/issueSecurityLevel.mjs';
import { IssueSecuritySchemes } from '@/version3/issueSecuritySchemes.mjs';
import { IssueTypeProperties } from '@/version3/issueTypeProperties.mjs';
import { IssueTypes } from '@/version3/issueTypes.mjs';
import { IssueTypeSchemes } from '@/version3/issueTypeSchemes.mjs';
import { IssueTypeScreenSchemes } from '@/version3/issueTypeScreenSchemes.mjs';
import { IssueVotes } from '@/version3/issueVotes.mjs';
import { IssueWatchers } from '@/version3/issueWatchers.mjs';
import { IssueWorklogProperties } from '@/version3/issueWorklogProperties.mjs';
import { IssueWorklogs } from '@/version3/issueWorklogs.mjs';
import { JiraExpressions } from '@/version3/jiraExpressions.mjs';
import { JiraSettings } from '@/version3/jiraSettings.mjs';
import { JQL } from '@/version3/jql.mjs';
import { JqlFunctionsApps } from '@/version3/jqlFunctionsApps.mjs';
import { Labels } from '@/version3/labels.mjs';
import { LicenseMetrics } from '@/version3/licenseMetrics.mjs';
import { Myself } from '@/version3/myself.mjs';
import { Permissions } from '@/version3/permissions.mjs';
import { PermissionSchemes } from '@/version3/permissionSchemes.mjs';
import { ProjectAvatars } from '@/version3/projectAvatars.mjs';
import { ProjectCategories } from '@/version3/projectCategories.mjs';
import { ProjectComponents } from '@/version3/projectComponents.mjs';
import { ProjectEmail } from '@/version3/projectEmail.mjs';
import { ProjectFeatures } from '@/version3/projectFeatures.mjs';
import { ProjectKeyAndNameValidation } from '@/version3/projectKeyAndNameValidation.mjs';
import { ProjectPermissionSchemes } from '@/version3/projectPermissionSchemes.mjs';
import { ProjectProperties } from '@/version3/projectProperties.mjs';
import { ProjectRoleActors } from '@/version3/projectRoleActors.mjs';
import { ProjectRoles } from '@/version3/projectRoles.mjs';
import { Projects } from '@/version3/projects.mjs';
import { ProjectTypes } from '@/version3/projectTypes.mjs';
import { ProjectVersions } from '@/version3/projectVersions.mjs';
import { Screens } from '@/version3/screens.mjs';
import { ScreenSchemes } from '@/version3/screenSchemes.mjs';
import { ScreenTabFields } from '@/version3/screenTabFields.mjs';
import { ScreenTabs } from '@/version3/screenTabs.mjs';
import { ServerInfo } from '@/version3/serverInfo.mjs';
import { Status } from '@/version3/status.mjs';
import { Tasks } from '@/version3/tasks.mjs';
import { TimeTracking } from '@/version3/timeTracking.mjs';
import { UiModificationsApps } from '@/version3/uiModificationsApps.mjs';
import { UserProperties } from '@/version3/userProperties.mjs';
import { UserSearch } from '@/version3/userSearch.mjs';
import { Users } from '@/version3/users.mjs';
import { Webhooks } from '@/version3/webhooks.mjs';
import { Workflows } from '@/version3/workflows.mjs';
import { WorkflowSchemeDrafts } from '@/version3/workflowSchemeDrafts.mjs';
import { WorkflowSchemeProjectAssociations } from '@/version3/workflowSchemeProjectAssociations.mjs';
import { WorkflowSchemes } from '@/version3/workflowSchemes.mjs';
import { WorkflowStatusCategories } from '@/version3/workflowStatusCategories.mjs';
import { WorkflowStatuses } from '@/version3/workflowStatuses.mjs';
import { WorkflowTransitionProperties } from '@/version3/workflowTransitionProperties.mjs';
import { WorkflowTransitionRules } from '@/version3/workflowTransitionRules.mjs';

describe('Version3Client', () => {
  it('should have all required properties instantiated', () => {
    const client = new Version3Client({ host: 'http://localhost:3000' });

    expect(client.announcementBanner).toBeInstanceOf(AnnouncementBanner);
    expect(client.applicationRoles).toBeInstanceOf(ApplicationRoles);
    expect(client.appMigration).toBeInstanceOf(AppMigration);
    expect(client.appProperties).toBeInstanceOf(AppProperties);
    expect(client.auditRecords).toBeInstanceOf(AuditRecords);
    expect(client.avatars).toBeInstanceOf(Avatars);
    expect(client.dashboards).toBeInstanceOf(Dashboards);
    expect(client.dynamicModules).toBeInstanceOf(DynamicModules);
    expect(client.filters).toBeInstanceOf(Filters);
    expect(client.filterSharing).toBeInstanceOf(FilterSharing);
    expect(client.groupAndUserPicker).toBeInstanceOf(GroupAndUserPicker);
    expect(client.groups).toBeInstanceOf(Groups);
    expect(client.instanceInformation).toBeInstanceOf(InstanceInformation);
    expect(client.issueAttachments).toBeInstanceOf(IssueAttachments);
    expect(client.issueCommentProperties).toBeInstanceOf(IssueCommentProperties);
    expect(client.issueComments).toBeInstanceOf(IssueComments);
    expect(client.issueCustomFieldConfigurationApps).toBeInstanceOf(IssueCustomFieldConfigurationApps);
    expect(client.issueCustomFieldContexts).toBeInstanceOf(IssueCustomFieldContexts);
    expect(client.issueCustomFieldOptions).toBeInstanceOf(IssueCustomFieldOptions);
    expect(client.issueCustomFieldOptionsApps).toBeInstanceOf(IssueCustomFieldOptionsApps);
    expect(client.issueCustomFieldValuesApps).toBeInstanceOf(IssueCustomFieldValuesApps);
    expect(client.issueFieldConfigurations).toBeInstanceOf(IssueFieldConfigurations);
    expect(client.issueFields).toBeInstanceOf(IssueFields);
    expect(client.issueLinks).toBeInstanceOf(IssueLinks);
    expect(client.issueLinkTypes).toBeInstanceOf(IssueLinkTypes);
    expect(client.issueNavigatorSettings).toBeInstanceOf(IssueNavigatorSettings);
    expect(client.issueNotificationSchemes).toBeInstanceOf(IssueNotificationSchemes);
    expect(client.issuePriorities).toBeInstanceOf(IssuePriorities);
    expect(client.issueProperties).toBeInstanceOf(IssueProperties);
    expect(client.issueRemoteLinks).toBeInstanceOf(IssueRemoteLinks);
    expect(client.issueResolutions).toBeInstanceOf(IssueResolutions);
    expect(client.issues).toBeInstanceOf(Issues);
    expect(client.issueSearch).toBeInstanceOf(IssueSearch);
    expect(client.issueSecurityLevel).toBeInstanceOf(IssueSecurityLevel);
    expect(client.issueSecuritySchemes).toBeInstanceOf(IssueSecuritySchemes);
    expect(client.issueTypeProperties).toBeInstanceOf(IssueTypeProperties);
    expect(client.issueTypes).toBeInstanceOf(IssueTypes);
    expect(client.issueTypeSchemes).toBeInstanceOf(IssueTypeSchemes);
    expect(client.issueTypeScreenSchemes).toBeInstanceOf(IssueTypeScreenSchemes);
    expect(client.issueVotes).toBeInstanceOf(IssueVotes);
    expect(client.issueWatchers).toBeInstanceOf(IssueWatchers);
    expect(client.issueWorklogProperties).toBeInstanceOf(IssueWorklogProperties);
    expect(client.issueWorklogs).toBeInstanceOf(IssueWorklogs);
    expect(client.jiraExpressions).toBeInstanceOf(JiraExpressions);
    expect(client.jiraSettings).toBeInstanceOf(JiraSettings);
    expect(client.jql).toBeInstanceOf(JQL);
    expect(client.jqlFunctionsApps).toBeInstanceOf(JqlFunctionsApps);
    expect(client.labels).toBeInstanceOf(Labels);
    expect(client.licenseMetrics).toBeInstanceOf(LicenseMetrics);
    expect(client.myself).toBeInstanceOf(Myself);
    expect(client.permissions).toBeInstanceOf(Permissions);
    expect(client.permissionSchemes).toBeInstanceOf(PermissionSchemes);
    expect(client.projectAvatars).toBeInstanceOf(ProjectAvatars);
    expect(client.projectCategories).toBeInstanceOf(ProjectCategories);
    expect(client.projectComponents).toBeInstanceOf(ProjectComponents);
    expect(client.projectEmail).toBeInstanceOf(ProjectEmail);
    expect(client.projectFeatures).toBeInstanceOf(ProjectFeatures);
    expect(client.projectKeyAndNameValidation).toBeInstanceOf(ProjectKeyAndNameValidation);
    expect(client.projectPermissionSchemes).toBeInstanceOf(ProjectPermissionSchemes);
    expect(client.projectProperties).toBeInstanceOf(ProjectProperties);
    expect(client.projectRoleActors).toBeInstanceOf(ProjectRoleActors);
    expect(client.projectRoles).toBeInstanceOf(ProjectRoles);
    expect(client.projects).toBeInstanceOf(Projects);
    expect(client.projectTypes).toBeInstanceOf(ProjectTypes);
    expect(client.projectVersions).toBeInstanceOf(ProjectVersions);
    expect(client.screens).toBeInstanceOf(Screens);
    expect(client.screenSchemes).toBeInstanceOf(ScreenSchemes);
    expect(client.screenTabFields).toBeInstanceOf(ScreenTabFields);
    expect(client.screenTabs).toBeInstanceOf(ScreenTabs);
    expect(client.serverInfo).toBeInstanceOf(ServerInfo);
    expect(client.status).toBeInstanceOf(Status);
    expect(client.tasks).toBeInstanceOf(Tasks);
    expect(client.timeTracking).toBeInstanceOf(TimeTracking);
    expect(client.uiModificationsApps).toBeInstanceOf(UiModificationsApps);
    expect(client.userProperties).toBeInstanceOf(UserProperties);
    expect(client.users).toBeInstanceOf(Users);
    expect(client.userSearch).toBeInstanceOf(UserSearch);
    expect(client.webhooks).toBeInstanceOf(Webhooks);
    expect(client.workflows).toBeInstanceOf(Workflows);
    expect(client.workflowSchemeDrafts).toBeInstanceOf(WorkflowSchemeDrafts);
    expect(client.workflowSchemeProjectAssociations).toBeInstanceOf(WorkflowSchemeProjectAssociations);
    expect(client.workflowSchemes).toBeInstanceOf(WorkflowSchemes);
    expect(client.workflowStatusCategories).toBeInstanceOf(WorkflowStatusCategories);
    expect(client.workflowStatuses).toBeInstanceOf(WorkflowStatuses);
    expect(client.workflowTransitionProperties).toBeInstanceOf(WorkflowTransitionProperties);
    expect(client.workflowTransitionRules).toBeInstanceOf(WorkflowTransitionRules);
  });
});
