import { describe, it, expect } from 'vitest';
import { Version3Client } from '@jirajs/version3';
import { AnnouncementBanner } from '@jirajs/version3/announcementBanner';
import { AppDataPolicies } from '@jirajs/version3/appDataPolicies';
import { AppMigration } from '@jirajs/version3/appMigration';
import { AppProperties } from '@jirajs/version3/appProperties';
import { ApplicationRoles } from '@jirajs/version3/applicationRoles';
import { AuditRecords } from '@jirajs/version3/auditRecords';
import { Avatars } from '@jirajs/version3/avatars';
import { ClassificationLevels } from '@jirajs/version3/classificationLevels';
import { Dashboards } from '@jirajs/version3/dashboards';
import { DynamicModules } from '@jirajs/version3/dynamicModules';
import { FilterSharing } from '@jirajs/version3/filterSharing';
import { Filters } from '@jirajs/version3/filters';
import { GroupAndUserPicker } from '@jirajs/version3/groupAndUserPicker';
import { Groups } from '@jirajs/version3/groups';
import { InstanceInformation } from '@jirajs/version3/instanceInformation';
import { IssueAttachments } from '@jirajs/version3/issueAttachments';
import { IssueBulkOperations } from '@jirajs/version3/issueBulkOperations';
import { IssueCommentProperties } from '@jirajs/version3/issueCommentProperties';
import { IssueComments } from '@jirajs/version3/issueComments';
import { IssueCustomFieldConfigurationApps } from '@jirajs/version3/issueCustomFieldConfigurationApps';
import { IssueCustomFieldContexts } from '@jirajs/version3/issueCustomFieldContexts';
import { IssueCustomFieldOptions } from '@jirajs/version3/issueCustomFieldOptions';
import { IssueCustomFieldOptionsApps } from '@jirajs/version3/issueCustomFieldOptionsApps';
import { IssueCustomFieldValuesApps } from '@jirajs/version3/issueCustomFieldValuesApps';
import { IssueFieldConfigurations } from '@jirajs/version3/issueFieldConfigurations';
import { IssueFields } from '@jirajs/version3/issueFields';
import { IssueLinks } from '@jirajs/version3/issueLinks';
import { IssueLinkTypes } from '@jirajs/version3/issueLinkTypes';
import { IssueNavigatorSettings } from '@jirajs/version3/issueNavigatorSettings';
import { IssueNotificationSchemes } from '@jirajs/version3/issueNotificationSchemes';
import { IssuePriorities } from '@jirajs/version3/issuePriorities';
import { IssueProperties } from '@jirajs/version3/issueProperties';
import { IssueRemoteLinks } from '@jirajs/version3/issueRemoteLinks';
import { IssueResolutions } from '@jirajs/version3/issueResolutions';
import { Issues } from '@jirajs/version3/issues';
import { IssueSearch } from '@jirajs/version3/issueSearch';
import { IssueSecurityLevel } from '@jirajs/version3/issueSecurityLevel';
import { IssueSecuritySchemes } from '@jirajs/version3/issueSecuritySchemes';
import { IssueTypeProperties } from '@jirajs/version3/issueTypeProperties';
import { IssueTypes } from '@jirajs/version3/issueTypes';
import { IssueTypeSchemes } from '@jirajs/version3/issueTypeSchemes';
import { IssueTypeScreenSchemes } from '@jirajs/version3/issueTypeScreenSchemes';
import { IssueVotes } from '@jirajs/version3/issueVotes';
import { IssueWatchers } from '@jirajs/version3/issueWatchers';
import { IssueWorklogProperties } from '@jirajs/version3/issueWorklogProperties';
import { IssueWorklogs } from '@jirajs/version3/issueWorklogs';
import { JiraExpressions } from '@jirajs/version3/jiraExpressions';
import { JiraSettings } from '@jirajs/version3/jiraSettings';
import { JQL } from '@jirajs/version3/jQL';
import { JqlFunctionsApps } from '@jirajs/version3/jqlFunctionsApps';
import { Labels } from '@jirajs/version3/labels';
import { LicenseMetrics } from '@jirajs/version3/licenseMetrics';
import { Myself } from '@jirajs/version3/myself';
import { Permissions } from '@jirajs/version3/permissions';
import { PermissionSchemes } from '@jirajs/version3/permissionSchemes';
import { Plans } from '@jirajs/version3/plans';
import { PrioritySchemes } from '@jirajs/version3/prioritySchemes';
import { ProjectAvatars } from '@jirajs/version3/projectAvatars';
import { ProjectCategories } from '@jirajs/version3/projectCategories';
import { ProjectClassificationLevels } from '@jirajs/version3/';
import { ProjectComponents } from '@jirajs/version3/projectComponents';
import { ProjectEmail } from '@jirajs/version3/projectEmail';
import { ProjectFeatures } from '@jirajs/version3/projectFeatures';
import { ProjectKeyAndNameValidation } from '@jirajs/version3/projectKeyAndNameValidation';
import { ProjectPermissionSchemes } from '@jirajs/version3/projectPermissionSchemes';
import { ProjectProperties } from '@jirajs/version3/projectProperties';
import { ProjectRoleActors } from '@jirajs/version3/projectRoleActors';
import { ProjectRoles } from '@jirajs/version3/projectRoles';
import { Projects } from '@jirajs/version3/projects';
import { ProjectTypes } from '@jirajs/version3/projectTypes';
import { ProjectVersions } from '@jirajs/version3/projectVersions';
import { Screens } from '@jirajs/version3/screens';
import { ScreenSchemes } from '@jirajs/version3/screenSchemes';
import { ScreenTabFields } from '@jirajs/version3/screenTabFields';
import { ScreenTabs } from '@jirajs/version3/screenTabs';
import { ServerInfo } from '@jirajs/version3/serverInfo';
import { ServiceRegistry } from '@jirajs/version3/serviceRegistry';
import { Status } from '@jirajs/version3/status';
import { Tasks } from '@jirajs/version3/tasks';
import { TeamsInPlan } from '@jirajs/version3/teamsInPlan';
import { TimeTracking } from '@jirajs/version3/timeTracking';
import { UIModificationsApps } from '@jirajs/version3/uIModificationsApps';
import { UserProperties } from '@jirajs/version3/userProperties';
import { UserSearch } from '@jirajs/version3/userSearch';
import { Users } from '@jirajs/version3/users';
import { Webhooks } from '@jirajs/version3/webhooks';
import { Workflows } from '@jirajs/version3/workflows';
import { WorkflowSchemeDrafts } from '@jirajs/version3/workflowSchemeDrafts';
import { WorkflowSchemeProjectAssociations } from '@jirajs/version3/workflowSchemeProjectAssociations';
import { WorkflowSchemes } from '@jirajs/version3/workflowSchemes';
import { WorkflowStatusCategories } from '@jirajs/version3/workflowStatusCategories';
import { WorkflowStatuses } from '@jirajs/version3/workflowStatuses';
import { WorkflowTransitionProperties } from '@jirajs/version3/workflowTransitionProperties';
import { WorkflowTransitionRules } from '@jirajs/version3/workflowTransitionRules';

describe('Version3Client', () => {
  it('should have all required properties instantiated', () => {
    const client = new Version3Client({ host: 'http://localhost:3000' });

    expect(client.announcementBanner).toBeInstanceOf(AnnouncementBanner);
    expect(client.appDataPolicies).toBeInstanceOf(AppDataPolicies);
    expect(client.applicationRoles).toBeInstanceOf(ApplicationRoles);
    expect(client.appMigration).toBeInstanceOf(AppMigration);
    expect(client.appProperties).toBeInstanceOf(AppProperties);
    expect(client.auditRecords).toBeInstanceOf(AuditRecords);
    expect(client.avatars).toBeInstanceOf(Avatars);
    expect(client.classificationLevels).toBeInstanceOf(ClassificationLevels);
    expect(client.dashboards).toBeInstanceOf(Dashboards);
    expect(client.dynamicModules).toBeInstanceOf(DynamicModules);
    expect(client.filters).toBeInstanceOf(Filters);
    expect(client.filterSharing).toBeInstanceOf(FilterSharing);
    expect(client.groupAndUserPicker).toBeInstanceOf(GroupAndUserPicker);
    expect(client.groups).toBeInstanceOf(Groups);
    expect(client.instanceInformation).toBeInstanceOf(InstanceInformation);
    expect(client.issueAttachments).toBeInstanceOf(IssueAttachments);
    expect(client.issueBulkOperations).toBeInstanceOf(IssueBulkOperations);
    expect(client.issueCommentProperties).toBeInstanceOf(IssueCommentProperties);
    expect(client.issueComments).toBeInstanceOf(IssueComments);
    expect(client.issueCustomFieldConfigurationApps).toBeInstanceOf(IssueCustomFieldConfigurationApps);
    expect(client.issueCustomFieldContexts).toBeInstanceOf(IssueCustomFieldContexts);
    expect(client.issueCustomFieldOptions).toBeInstanceOf(IssueCustomFieldOptions);
    expect(client.issueCustomFieldOptionsApps).toBeInstanceOf(IssueCustomFieldOptionsApps);
    expect(client.issueCustomFieldValuesApps).toBeInstanceOf(IssueCustomFieldValuesApps);
    expect(client.issueFieldConfigurations).toBeInstanceOf(IssueFieldConfigurations);
    expect(client.issueFields).toBeInstanceOf(IssueFields);
    expect(client.issueLinks).toBeInstanceOf(IssueLinks);
    expect(client.issueLinkTypes).toBeInstanceOf(IssueLinkTypes);
    expect(client.issueNavigatorSettings).toBeInstanceOf(IssueNavigatorSettings);
    expect(client.issueNotificationSchemes).toBeInstanceOf(IssueNotificationSchemes);
    expect(client.issuePriorities).toBeInstanceOf(IssuePriorities);
    expect(client.issueProperties).toBeInstanceOf(IssueProperties);
    expect(client.issueRemoteLinks).toBeInstanceOf(IssueRemoteLinks);
    expect(client.issueResolutions).toBeInstanceOf(IssueResolutions);
    expect(client.issues).toBeInstanceOf(Issues);
    expect(client.issueSearch).toBeInstanceOf(IssueSearch);
    expect(client.issueSecurityLevel).toBeInstanceOf(IssueSecurityLevel);
    expect(client.issueSecuritySchemes).toBeInstanceOf(IssueSecuritySchemes);
    expect(client.issueTypeProperties).toBeInstanceOf(IssueTypeProperties);
    expect(client.issueTypes).toBeInstanceOf(IssueTypes);
    expect(client.issueTypeSchemes).toBeInstanceOf(IssueTypeSchemes);
    expect(client.issueTypeScreenSchemes).toBeInstanceOf(IssueTypeScreenSchemes);
    expect(client.issueVotes).toBeInstanceOf(IssueVotes);
    expect(client.issueWatchers).toBeInstanceOf(IssueWatchers);
    expect(client.issueWorklogProperties).toBeInstanceOf(IssueWorklogProperties);
    expect(client.issueWorklogs).toBeInstanceOf(IssueWorklogs);
    expect(client.jiraExpressions).toBeInstanceOf(JiraExpressions);
    expect(client.jiraSettings).toBeInstanceOf(JiraSettings);
    expect(client.jql).toBeInstanceOf(JQL);
    expect(client.jqlFunctionsApps).toBeInstanceOf(JqlFunctionsApps);
    expect(client.labels).toBeInstanceOf(Labels);
    expect(client.licenseMetrics).toBeInstanceOf(LicenseMetrics);
    expect(client.myself).toBeInstanceOf(Myself);
    expect(client.permissions).toBeInstanceOf(Permissions);
    expect(client.permissionSchemes).toBeInstanceOf(PermissionSchemes);
    expect(client.plans).toBeInstanceOf(Plans);
    expect(client.prioritySchemes).toBeInstanceOf(PrioritySchemes);
    expect(client.projectAvatars).toBeInstanceOf(ProjectAvatars);
    expect(client.projectCategories).toBeInstanceOf(ProjectCategories);
    expect(client.projectClassificationLevels).toBeInstanceOf(ProjectClassificationLevels);
    expect(client.projectComponents).toBeInstanceOf(ProjectComponents);
    expect(client.projectEmail).toBeInstanceOf(ProjectEmail);
    expect(client.projectFeatures).toBeInstanceOf(ProjectFeatures);
    expect(client.projectKeyAndNameValidation).toBeInstanceOf(ProjectKeyAndNameValidation);
    expect(client.projectPermissionSchemes).toBeInstanceOf(ProjectPermissionSchemes);
    expect(client.projectProperties).toBeInstanceOf(ProjectProperties);
    expect(client.projectRoleActors).toBeInstanceOf(ProjectRoleActors);
    expect(client.projectRoles).toBeInstanceOf(ProjectRoles);
    expect(client.projects).toBeInstanceOf(Projects);
    expect(client.projectTypes).toBeInstanceOf(ProjectTypes);
    expect(client.projectVersions).toBeInstanceOf(ProjectVersions);
    expect(client.screens).toBeInstanceOf(Screens);
    expect(client.screenSchemes).toBeInstanceOf(ScreenSchemes);
    expect(client.screenTabFields).toBeInstanceOf(ScreenTabFields);
    expect(client.screenTabs).toBeInstanceOf(ScreenTabs);
    expect(client.serverInfo).toBeInstanceOf(ServerInfo);
    expect(client.serviceRegistry).toBeInstanceOf(ServiceRegistry);
    expect(client.status).toBeInstanceOf(Status);
    expect(client.tasks).toBeInstanceOf(Tasks);
    expect(client.teamsInPlan).toBeInstanceOf(TeamsInPlan);
    expect(client.timeTracking).toBeInstanceOf(TimeTracking);
    expect(client.uiModificationsApps).toBeInstanceOf(UIModificationsApps);
    expect(client.userProperties).toBeInstanceOf(UserProperties);
    expect(client.users).toBeInstanceOf(Users);
    expect(client.userSearch).toBeInstanceOf(UserSearch);
    expect(client.webhooks).toBeInstanceOf(Webhooks);
    expect(client.workflows).toBeInstanceOf(Workflows);
    expect(client.workflowSchemeDrafts).toBeInstanceOf(WorkflowSchemeDrafts);
    expect(client.workflowSchemeProjectAssociations).toBeInstanceOf(WorkflowSchemeProjectAssociations);
    expect(client.workflowSchemes).toBeInstanceOf(WorkflowSchemes);
    expect(client.workflowStatusCategories).toBeInstanceOf(WorkflowStatusCategories);
    expect(client.workflowStatuses).toBeInstanceOf(WorkflowStatuses);
    expect(client.workflowTransitionProperties).toBeInstanceOf(WorkflowTransitionProperties);
    expect(client.workflowTransitionRules).toBeInstanceOf(WorkflowTransitionRules);
  });
});
